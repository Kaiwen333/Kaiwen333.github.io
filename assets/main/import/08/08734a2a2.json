[1,["455PkMFqhBvKasrQBXbEwm","1brw/JvvpFnIvdrxpFCgMZ","f9R21CW0VCZpbcCgijz4jf","e7GzzS6m1J1rlW5UuqnK/3","3boWuRvoNOtraPB8lTcEzJ","2b1YCMuSxFVpcVCCRc/RQS","bdbJgxAdhM+4banJsbytOd","9bCVxX4whAhaH55vKtMEbY","dcezMswPBPopeiAfwNJ3aN","f753HRAIxPa63OM4MLsHhl","7f+vB3O1VFA7jGrTJWlzei","c2/Z/legtJKY85KKhG65j5@f9941","26vDZ2yCZFTYXIIRpNtk+G@f9941","c71R7/3zVGfI4OvRF0SMkl","f5f6aHyA5GsY6k3OgD2SK1","7fDrc3Op1Hi5zk6MsEjZh+@e4027","24xBnqY6hOoanQf8RpSJu8@f9941","7fDrc3Op1Hi5zk6MsEjZh+@0a1ef","12DgigpbhCr4KhZoWS/M6T@6c48a","24xBnqY6hOoanQf8RpSJu8@6c48a","26vDZ2yCZFTYXIIRpNtk+G@6c48a","f2tINm4MVEeo8b7+2+E7WX@a283e","7fDrc3Op1Hi5zk6MsEjZh+@de5d5","4c0lepvN9AjKvYdQB0ns22@f9941","f4c3wZe8FKoKPgwJmTm9lF@f9941","fcLVWPD79MbIP80Qrj4TGg@f9941","9dEjN0ARFLxqxLFmgYLayz@f9941","e1uiy4SMJEyJVz9R/HJnaG@f9941","52lIusuodBu7ydfQdJWfeh@f9941","30MPX/aUdF4IpRFisEDPT+","12DgigpbhCr4KhZoWS/M6T@f9941","4c0lepvN9AjKvYdQB0ns22@6c48a","52lIusuodBu7ydfQdJWfeh@6c48a","0eMUhERX9EiLY2yT9cmpwv","7fDrc3Op1Hi5zk6MsEjZh+@fd26c","7fDrc3Op1Hi5zk6MsEjZh+@30732","b8Ie6GNyxKGpHnuA+R137U","7fDrc3Op1Hi5zk6MsEjZh+@7913f","7fDrc3Op1Hi5zk6MsEjZh+@f1394","7fDrc3Op1Hi5zk6MsEjZh+@5b587","7fDrc3Op1Hi5zk6MsEjZh+@75ee4","868l1cneVFT6X57hZgPmcB","9dEjN0ARFLxqxLFmgYLayz@6c48a","7fDrc3Op1Hi5zk6MsEjZh+@05da8","c2/Z/legtJKY85KKhG65j5@6c48a","e1uiy4SMJEyJVz9R/HJnaG@6c48a","f2tINm4MVEeo8b7+2+E7WX@0b4a2","f2tINm4MVEeo8b7+2+E7WX@faac9","f2tINm4MVEeo8b7+2+E7WX@57ed4","f2tINm4MVEeo8b7+2+E7WX@38afb","f2tINm4MVEeo8b7+2+E7WX@b9929","f2tINm4MVEeo8b7+2+E7WX@f805f","f2tINm4MVEeo8b7+2+E7WX@19d75","f2tINm4MVEeo8b7+2+E7WX@931fd","f2tINm4MVEeo8b7+2+E7WX@6f7ee","f2tINm4MVEeo8b7+2+E7WX@5646d","f2tINm4MVEeo8b7+2+E7WX@64ba3","f2tINm4MVEeo8b7+2+E7WX@5e6ac","f2tINm4MVEeo8b7+2+E7WX@9cd46","f2tINm4MVEeo8b7+2+E7WX@b2083","f2tINm4MVEeo8b7+2+E7WX@0e27a","f2tINm4MVEeo8b7+2+E7WX@77579","f2tINm4MVEeo8b7+2+E7WX@51761","f2tINm4MVEeo8b7+2+E7WX@c4f17","f2tINm4MVEeo8b7+2+E7WX@947f4","f2tINm4MVEeo8b7+2+E7WX@d8ac4","f2tINm4MVEeo8b7+2+E7WX@458b3","f2tINm4MVEeo8b7+2+E7WX@97ad7","f2tINm4MVEeo8b7+2+E7WX@14dc2","f2tINm4MVEeo8b7+2+E7WX@f4fe3","f2tINm4MVEeo8b7+2+E7WX@ddb95","f2tINm4MVEeo8b7+2+E7WX@582a3","f2tINm4MVEeo8b7+2+E7WX@67986","f2tINm4MVEeo8b7+2+E7WX@1c5ac","f2tINm4MVEeo8b7+2+E7WX@6368c","f2tINm4MVEeo8b7+2+E7WX@ae96a","f2tINm4MVEeo8b7+2+E7WX@f1c02","f2tINm4MVEeo8b7+2+E7WX@0abad","f2tINm4MVEeo8b7+2+E7WX@6c5b6","f2tINm4MVEeo8b7+2+E7WX@2f5fe","f2tINm4MVEeo8b7+2+E7WX@930f6","f2tINm4MVEeo8b7+2+E7WX@750ed","f2tINm4MVEeo8b7+2+E7WX@f0406","f2tINm4MVEeo8b7+2+E7WX@cbf09","f2tINm4MVEeo8b7+2+E7WX@feb61","f2tINm4MVEeo8b7+2+E7WX@c8b7a","f2tINm4MVEeo8b7+2+E7WX@a4306","f2tINm4MVEeo8b7+2+E7WX@0fdeb","f2tINm4MVEeo8b7+2+E7WX@1c53a","f2tINm4MVEeo8b7+2+E7WX@c8347","f2tINm4MVEeo8b7+2+E7WX@f741f","f2tINm4MVEeo8b7+2+E7WX@0687b","f2tINm4MVEeo8b7+2+E7WX@59fa4","f2tINm4MVEeo8b7+2+E7WX@09371","f2tINm4MVEeo8b7+2+E7WX@e17e1","f2tINm4MVEeo8b7+2+E7WX@fdaa9","f2tINm4MVEeo8b7+2+E7WX@81e88","f2tINm4MVEeo8b7+2+E7WX@f49c3","f2tINm4MVEeo8b7+2+E7WX@4d416","f2tINm4MVEeo8b7+2+E7WX@064f7","f2tINm4MVEeo8b7+2+E7WX@1f089","f2tINm4MVEeo8b7+2+E7WX@76602","f2tINm4MVEeo8b7+2+E7WX@de65d","f2tINm4MVEeo8b7+2+E7WX@7905e","f2tINm4MVEeo8b7+2+E7WX@41d63","f2tINm4MVEeo8b7+2+E7WX@f54d0","f2tINm4MVEeo8b7+2+E7WX@37ae9","f2tINm4MVEeo8b7+2+E7WX@f43ea","f2tINm4MVEeo8b7+2+E7WX@0544a","f2tINm4MVEeo8b7+2+E7WX@c0727","f2tINm4MVEeo8b7+2+E7WX@45161","f2tINm4MVEeo8b7+2+E7WX@2c8e6","f2tINm4MVEeo8b7+2+E7WX@03667","f2tINm4MVEeo8b7+2+E7WX@9abdc","f2tINm4MVEeo8b7+2+E7WX@d8a5b","f2tINm4MVEeo8b7+2+E7WX@d0ee3","f2tINm4MVEeo8b7+2+E7WX@76da1","f2tINm4MVEeo8b7+2+E7WX@0392e","f2tINm4MVEeo8b7+2+E7WX@e7f49","f2tINm4MVEeo8b7+2+E7WX@b927f","f2tINm4MVEeo8b7+2+E7WX@f18ca","f2tINm4MVEeo8b7+2+E7WX@7ec8a","f2tINm4MVEeo8b7+2+E7WX@85cd4","f2tINm4MVEeo8b7+2+E7WX@af7b5","f2tINm4MVEeo8b7+2+E7WX@42e4b","f2tINm4MVEeo8b7+2+E7WX@83357","f2tINm4MVEeo8b7+2+E7WX@c4daa","f2tINm4MVEeo8b7+2+E7WX@2b1a1","f2tINm4MVEeo8b7+2+E7WX@70c61","f2tINm4MVEeo8b7+2+E7WX@2daab","f2tINm4MVEeo8b7+2+E7WX@dd815","f2tINm4MVEeo8b7+2+E7WX@36976","f2tINm4MVEeo8b7+2+E7WX@17531","f2tINm4MVEeo8b7+2+E7WX@0a31a","f2tINm4MVEeo8b7+2+E7WX@a0826","f4c3wZe8FKoKPgwJmTm9lF@6c48a","7fDrc3Op1Hi5zk6MsEjZh+@b8518","fcLVWPD79MbIP80Qrj4TGg@6c48a"],["node","_mesh","_parent","_effectAsset","_textureSource","_spriteFrame","root","mainTexture","asset","_defaultClip","data","_skeleton","targetInfo","_normalSprite","_target","_cameraComponent","source","scene","_clip","yanhua","_file","spriteFrame"],[["cc.Node",["_name","_layer","_objFlags","__editorExtras__","_id","_active","_parent","_lpos","_prefab","_components","_children","_lrot","_euler","_lscale"],-3,1,5,4,9,2,5,5,5],"cc.SpriteFrame",["cc.Widget",["_alignFlags","_originalHeight","_left","_top","_originalWidth","_right","_bottom","node","_target"],-4,1,1],["cc.Node",["_name","_id","_parent","_lpos","_components","_children","_prefab","_lrot","_euler"],1,1,5,2,9,4,5,5],["cc.Animation",["playOnLoad","node","_clips"],2,1,3],["cc.Node",["_name","_layer","_id","_active","_components","_lpos","_children","_parent"],-1,12,5,2,1],["cc.UITransform",["node","_contentSize","_anchorPoint","__prefab"],3,1,5,5,4],["cc.Sprite",["_sizeMode","node","_spriteFrame"],2,1,6],["cc.PrefabInstance",["fileId","prefabRootNode","propertyOverrides","mountedComponents","mountedChildren"],1,9,9,9],["cc.SpotLight",["_size","_luminanceLDR","_range","_spotAngle","_luminanceHDR","_colorTemperature","node","_staticSettings"],-3,1,4],["cc.Material",["_states","_defines","_name","_props"],0,12],["cc.PrefabInfo",["fileId","root","instance","asset","targetOverrides","nestedPrefabInstanceRoots"],2,1,4,6,9,2],["cc.TargetOverrideInfo",["propertyPath","target","targetInfo","source"],2,1,4,1],["cc.Camera",["_clearFlags","_visibility","_fov","_fovAxis","_projection","_orthoHeight","_far","node","_color"],-4,1,5],["cc.Prefab",["_name"],2],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.SceneAsset",["_name"],2],["cc.Node",["_name","_children","_components","_prefab"],2,12,9,4],["cc.Canvas",["node","_cameraComponent"],3,1,1],["cc.PrefabInfo",["fileId","root","asset"],2,1,1],["cc.MountedComponentsInfo",["targetInfo","components"],3,4,9],["cc.TargetInfo",["localID"],2],["cc.BoxCollider",["_isTrigger","node","_center","_size"],2,1,5,5],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,4],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,8],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["cc.Scene",["_name","_children","_prefab","_globals"],2,2,4,4],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree"],3,4,4,4,4,4],["cc.AmbientInfo",["_skyIllumLDR","_skyColorHDR"],2,5],["cc.ShadowsInfo",["_shadowColor"],3,5],["cc.SkyboxInfo",[],3],["cc.FogInfo",[],3],["cc.OctreeInfo",[],3],["cc.AudioSource",["node","_clip"],3,1,6],["ac1792Cfy9AkbsCdIaHhHT+",["node"],3,1],["cc.Button",["node","clickEvents","_normalSprite"],3,1,9,6],["cc.ClickEvent",["_componentId","handler","target"],1,1],["cc.MountedChildrenInfo",["targetInfo","nodes"],3,4,9],["cc.DirectionalLight",["_colorTemperature","_illuminanceLDR","node","_staticSettings"],1,1,4],["cc.StaticLightSettings",[],3],["1cb50SrGjFAhatz16Y2DRJk",["node","menubox","menuboxAni","mainCamera","mainCameraAni","peopleNode","bg1","bg1Ani","bg2","bg2Ani"],3,1,1,1,1,1,1,1,1,1,1],["cc.AudioClip",["_name","_native","_duration"],0],["cc.Skeleton",["_name","_hash","_joints","_bindposes"],0,12],["cc.Mesh",["_native","_hash","_struct"],1,11],["cc.SkeletalAnimation",["node","__prefab","_clips","_defaultClip"],3,1,4,3,6],["cc.CompPrefabInfo",["fileId"],2],["cc.SkinnedMeshRenderer",["node","__prefab","_materials","lightmapSettings","_skinningRoot","_mesh","_skeleton"],3,1,4,3,4,1,6,6],["cc.ModelLightmapSettings",[],3],["cc.ParticleSystem2D",["_name","_dstBlendFactor","duration","emissionRate","life","angle","angleVar","startSize","startSizeVar","endSize","startSpin","endSpin","endSpinVar","emitterMode","speed","speedVar","tangentialAccel","tangentialAccelVar","radialAccel","radialAccelVar","endRadius","_custom","_totalParticles","node","__prefab","posVar","gravity","_startColor","_startColorVar","_endColor","_endColorVar","_file","_spriteFrame"],-20,1,4,5,5,5,5,5,5,6,6],["cc.ParticleAsset",["_name","_native"],1],["cc.MeshRenderer",["node","__prefab","_materials","lightmapSettings","_mesh"],3,1,4,3,4,6]],[[19,0,1,2,2],[46,0,2],[44,0,1,2,3],[48,1],[51,0,1,2,3,4,1],[0,0,6,9,8,7,2],[0,0,6,10,8,7,11,12,2],[21,0,2],[0,0,6,8,7,2],[6,0,1,1],[0,0,6,9,8,7,11,13,12,2],[3,0,2,5,6,3,2],[23,0,1,2,3],[10,0,1,3,3],[7,0,1,2,2],[10,2,0,1,3,4],[24,0,1,2,2],[40,1],[0,0,1,6,9,7,3],[0,0,6,9,7,11,12,2],[0,0,10,8,7,11,12,2],[2,0,2,3,7,8,4],[25,0,1,2,2],[0,0,6,10,8,7,11,13,12,2],[7,1,2,1],[11,0,1,2,3,2],[26,0,1,2,3],[43,0,1,2,3,4],[47,0,1,2,3,4,5,6,1],[0,2,3,6,8,3],[0,0,5,1,6,9,7,4],[0,0,6,8,7,11,13,12,2],[5,0,1,7,4,5,3],[3,0,2,5,6,3,7,8,2],[6,0,1,2,1],[7,0,1,2],[2,0,3,7,8,3],[20,0,1,1],[36,0,1,2,1],[37,0,1,2,3],[4,1,2,1],[9,0,1,2,3,6,7,5],[14,1],[15,0,1,2,4],[16,0,2],[0,0,1,10,9,7,3],[0,2,3,8,3],[0,0,4,6,10,7,3],[0,0,1,6,10,9,3],[0,0,5,1,6,9,7,13,4],[0,0,6,2],[0,0,4,6,9,11,12,3],[0,0,6,10,8,2],[0,0,1,9,8,7,3],[0,0,10,8,2],[5,0,1,2,6,4,5,4],[5,0,3,1,7,6,4,5,4],[3,0,1,2,4,3,3],[3,0,2,4,3,2],[17,0,1,2,3,2],[6,0,3,1],[2,0,7,8,2],[2,0,7,2],[2,0,4,1,7,8,4],[2,0,1,7,3],[2,0,2,1,7,8,4],[2,0,5,6,7,8,4],[18,0,1,1],[11,0,4,5,2],[8,0,1,3,2,3],[8,0,1,4,3,2,3],[8,0,2,2],[22,0,1,2,3,2],[27,0,1,2,3,2],[12,0,1,2,2],[12,0,3,1,2,2],[28,0,1,2,3,4,1],[29,0,1,2],[30,0,1],[31,1],[32,1],[33,1],[34,0,1,1],[35,0,1],[38,0,1,1],[4,1],[4,1,1],[4,0,1,2],[39,0,1,2,3,3],[13,2,3,0,1,7,5],[13,4,5,6,0,1,7,8,6],[9,0,4,1,2,3,6,7,6],[9,5,0,4,1,2,3,6,7,7],[41,0,1,2,3,4,5,6,7,8,9,1],[42,0,1,2,4],[14,0,2],[45,0,1,2,3,1],[49,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,24],[50,0,1,3]],[[[[15,"材质.001",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.4000000059604645,"roughness":0.1925843507051468},"mainTexture",6,0]],11]]],0,0,[0,0],[7,3],[17,1]],[[{"name":"btn2","rect":{"x":0,"y":0,"width":235,"height":70},"offset":{"x":0,"y":0},"originalSize":{"width":235,"height":70},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[4],[18]],[[[43,"builtin-standard",[{"hash":2864919663,"name":"builtin-standard|standard-vs|standard-fs","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"pbrMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_PBR_MAP"]},{"name":"metallicRoughnessMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_ROUGHNESS_MAP"]},{"name":"occlusionMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_OCCLUSION_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]}],"samplers":[],"textures":[],"buffers":[{"name":"b_ccLightsBuffer","memoryAccess":1,"stageFlags":16,"binding":7,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"b_clusterLightIndicesBuffer","memoryAccess":1,"stageFlags":16,"binding":8,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"b_clusterLightGridBuffer","memoryAccess":1,"stageFlags":16,"binding":9,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_vertexId","format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_color","format":44,"location":13,"defines":["USE_VERTEX_COLOR"]},{"name":"a_texCoord1","format":21,"location":14,"defines":[]}],"varyings":[{"name":"v_fog_factor","type":13,"count":1,"stageFlags":17,"location":0,"defines":["!CC_USE_ACCURATE_FOG"]},{"name":"v_shadowPos","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_color","type":16,"count":1,"stageFlags":17,"location":2,"defines":["USE_VERTEX_COLOR"]},{"name":"v_position","type":15,"count":1,"stageFlags":17,"location":3,"defines":[]},{"name":"v_normal","type":15,"count":1,"stageFlags":17,"location":4,"defines":[]},{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":5,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":17,"location":6,"defines":[]},{"name":"v_tangent","type":15,"count":1,"stageFlags":17,"location":7,"defines":["USE_NORMAL_MAP"]},{"name":"v_bitangent","type":15,"count":1,"stageFlags":17,"location":8,"defines":["USE_NORMAL_MAP"]},{"name":"v_luv","type":15,"count":1,"stageFlags":17,"location":9,"defines":["USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"fragColors":[{"name":"fragColorX","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":["CC_FORWARD_ADD"]},{"name":"fragColor0","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":1,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor1","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":2,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor2","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":3,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor3","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":4,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) out float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nlayout(location = 1) out highp vec4 v_shadowPos;\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\n  layout(location = 13) in vec4 a_color;\n  layout(location = 2) out vec4 v_color;\n#endif\nlayout(location = 3) out vec3 v_position;\nlayout(location = 4) out vec3 v_normal;\nlayout(location = 5) out vec2 v_uv;\nlayout(location = 6) out vec2 v_uv1;\n#if USE_NORMAL_MAP\n  layout(location = 7) out vec3 v_tangent;\n  layout(location = 8) out vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  layout(location = 14) in vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 9) out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n    v_luv.z = cc_lightingMapUVParam.z;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n    v_luv.z = a_lightingMapUVParam.z;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) in float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(cc_shadowLPNNInfo.z > 0.0001)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n#endif\n#if CC_USE_IBL\n  layout(set = 0, binding = 4) uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    layout(set = 0, binding = 6) uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  vec3 position;\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - s.position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > 0.0001) {\n      finalColor = s.lightmap.rgb;\n    }\n  #else\n    diffuseContrib /= 3.14159265359;\n  #endif\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW && CC_ENABLE_DIR_SHADOW\n    if (NL > 0.0) {\n      {\n        vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N);\n        float pcf = cc_shadowWHPBInfo.z;\n        if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n        else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n        else shadow = CCGetShadowFactorHard(pos);\n        shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n      }\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nlayout(location = 1) in highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 9) in vec3 v_luv;\n  layout(set = 2, binding = 10) uniform sampler2D cc_lightingMap;\n  vec3 UnpackLightingmap(vec4 color) {\n    vec3 c;\n    float e = 1.0 + color.a * (8.0 - 1.0);\n    c.r = color.r * e;\n    c.g = color.g * e;\n    c.b = color.b * e;\n    return c;\n  }\n#endif\nlayout(location = 3) in vec3 v_position;\nlayout(location = 5) in vec2 v_uv;\nlayout(location = 6) in vec2 v_uv1;\nlayout(location = 4) in vec3 v_normal;\n#if USE_VERTEX_COLOR\n  layout(location = 2) in vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  layout(location = 7) in vec3 v_tangent;\n  layout(location = 8) in vec3 v_bitangent;\n  layout(set = 1, binding = 2) uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  layout(set = 1, binding = 3) uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  layout(set = 1, binding = 4) uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  layout(set = 1, binding = 5) uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  layout(set = 1, binding = 6) uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = UnpackLightingmap(lightColor);\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(set = 2, binding = 1) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - s.position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - s.position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, s.position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, s.position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, s.position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(set = 1, binding = 7) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(set = 1, binding = 8) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(set = 1, binding = 9) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_screenSize.x / float(16));\n    float clusterSizeY = ceil(cc_screenSize.y / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - s.position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(s.position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - s.position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, s.position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, s.position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, s.position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  layout(location = 3) out vec4 fragColor3;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(s.position, s.roughness);\n    fragColor2 = vec4(s.normal, s.metallic);\n    fragColor3 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nout float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\n  in vec4 a_color;\n  out vec4 v_color;\n#endif\nout vec3 v_position;\nout vec3 v_normal;\nout vec2 v_uv;\nout vec2 v_uv1;\n#if USE_NORMAL_MAP\n  out vec3 v_tangent;\n  out vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n    v_luv.z = cc_lightingMapUVParam.z;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n    v_luv.z = a_lightingMapUVParam.z;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(cc_shadowLPNNInfo.z > 0.0001)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  vec3 position;\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - s.position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > 0.0001) {\n      finalColor = s.lightmap.rgb;\n    }\n  #else\n    diffuseContrib /= 3.14159265359;\n  #endif\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW && CC_ENABLE_DIR_SHADOW\n    if (NL > 0.0) {\n      {\n        vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N);\n        float pcf = cc_shadowWHPBInfo.z;\n        if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n        else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n        else shadow = CCGetShadowFactorHard(pos);\n        shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n      }\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nin highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  in vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n  vec3 UnpackLightingmap(vec4 color) {\n    vec3 c;\n    float e = 1.0 + color.a * (8.0 - 1.0);\n    c.r = color.r * e;\n    c.g = color.g * e;\n    c.b = color.b * e;\n    return c;\n  }\n#endif\nin vec3 v_position;\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec3 v_normal;\n#if USE_VERTEX_COLOR\n  in vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  in vec3 v_tangent;\n  in vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = UnpackLightingmap(lightColor);\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(std140) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - s.position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - s.position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, s.position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, s.position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, s.position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(std430, binding = 4) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(std430, binding = 5) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(std430, binding = 6) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_screenSize.x / float(16));\n    float clusterSizeY = ceil(cc_screenSize.y / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - s.position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(s.position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - s.position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, s.position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, s.position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, s.position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  layout(location = 3) out vec4 fragColor3;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(s.position, s.roughness);\n    fragColor2 = vec4(s.normal, s.metallic);\n    fragColor3 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_lightingMapUVParam;\n#endif\n      uniform vec4 tilingOffset;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\n  attribute vec4 a_color;\n  varying vec4 v_color;\n#endif\nvarying vec3 v_position;\nvarying vec3 v_normal;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n    v_luv.z = cc_lightingMapUVParam.z;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n    v_luv.z = a_lightingMapUVParam.z;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\nuniform mediump vec4 cc_screenSize;\nuniform highp mat4 cc_matView;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n  uniform mediump vec4 cc_ambientSky;\n  uniform mediump vec4 cc_ambientGround;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n  uniform mediump vec4 cc_nearFar;\n     uniform vec4 albedo;\n     uniform vec4 albedoScaleAndCutoff;\n     uniform vec4 pbrParams;\n     uniform vec4 emissive;\n     uniform vec4 emissiveScaleParam;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nuniform highp mat4 cc_matLightView;\n  uniform highp vec4 cc_shadowInvProjDepthInfo;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform lowp vec4 cc_shadowNFLSInfo;\n  uniform lowp vec4 cc_shadowWHPBInfo;\n  uniform lowp vec4 cc_shadowLPNNInfo;\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(cc_shadowLPNNInfo.z > 0.0001)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture2D(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture2D(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture2D(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return texture2DLodEXT(tex, coord, lod);\n      #else\n        return texture2D(tex, coord, lod);\n      #endif\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return textureCubeLodEXT(tex, coord, lod);\n      #else\n        return textureCube(tex, coord, lod);\n      #endif\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = textureCube(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  vec3 position;\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - s.position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > 0.0001) {\n      finalColor = s.lightmap.rgb;\n    }\n  #else\n    diffuseContrib /= 3.14159265359;\n  #endif\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW && CC_ENABLE_DIR_SHADOW\n    if (NL > 0.0) {\n      {\n        vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N);\n        float pcf = cc_shadowWHPBInfo.z;\n        if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n        else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n        else shadow = CCGetShadowFactorHard(pos);\n        shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n      }\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = textureCube(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nvarying highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n  vec3 UnpackLightingmap(vec4 color) {\n    vec3 c;\n    float e = 1.0 + color.a * (8.0 - 1.0);\n    c.r = color.r * e;\n    c.g = color.g * e;\n    c.b = color.b * e;\n    return c;\n  }\n#endif\nvarying vec3 v_position;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec3 v_normal;\n#if USE_VERTEX_COLOR\n  varying vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture2D(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture2D(cc_lightingMap, v_luv.xy);\n    s.lightmap = UnpackLightingmap(lightColor);\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture2D(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture2D(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture2D(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture2D(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - s.position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - s.position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, s.position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, s.position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, s.position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_screenSize.x / float(16));\n    float clusterSizeY = ceil(cc_screenSize.y / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - s.position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(s.position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - s.position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, s.position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, s.position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, s.position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    CC_APPLY_FOG(color, s.position.xyz);\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  void main () {\n    StandardSurface s; surf(s);\n    gl_FragData[0] = s.albedo;\n    gl_FragData[1] = vec4(s.position, s.roughness);\n    gl_FragData[2] = vec4(s.normal, s.metallic);\n    gl_FragData[3] = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_environment","defines":["CC_USE_IBL"]},{"name":"cc_diffuseMap","defines":["CC_USE_IBL","CC_USE_DIFFUSEMAP"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_lightingMap","defines":["USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":221,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":64}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":[]},{"name":"CC_USE_FOG","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean","defines":[]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"USE_VERTEX_COLOR","type":"boolean","defines":[]},{"name":"USE_NORMAL_MAP","type":"boolean","defines":[]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"CC_FORWARD_ADD","type":"boolean","defines":[]},{"name":"USE_TWOSIDE","type":"boolean","defines":[]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":[]},{"name":"CC_USE_IBL","type":"number","defines":[],"range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","defines":["CC_USE_IBL"],"range":[0,2]},{"name":"USE_REFLECTION_DENOISE","type":"boolean","defines":[]},{"name":"CC_ENABLE_DIR_SHADOW","type":"boolean","defines":["CC_RECEIVE_SHADOW"]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"NORMAL_UV","type":"string","defines":["USE_NORMAL_MAP"],"options":["v_uv","v_uv1"]},{"name":"PBR_UV","type":"string","defines":[],"options":["v_uv","v_uv1"]},{"name":"USE_PBR_MAP","type":"boolean","defines":[]},{"name":"USE_METALLIC_ROUGHNESS_MAP","type":"boolean","defines":[]},{"name":"USE_OCCLUSION_MAP","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_MAP","type":"boolean","defines":[]},{"name":"EMISSIVE_UV","type":"string","defines":["USE_EMISSIVE_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]},{"name":"CC_PIPELINE_TYPE","type":"number","defines":["CC_FORWARD_ADD"],"range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean","defines":["CC_FORWARD_ADD"]}]},{"hash":1774012115,"name":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_vertexId","format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_texCoord1","format":21,"location":13,"defines":[]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_worldPos","type":16,"count":1,"stageFlags":17,"location":2,"defines":[]},{"name":"v_clip_depth","type":13,"count":1,"stageFlags":17,"location":3,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  layout(location = 13) in vec2 a_texCoord1;\n#endif\nlayout(location = 0) out vec2 v_uv;\nlayout(location = 1) out vec2 v_uv1;\nlayout(location = 2) out vec4 v_worldPos;\nlayout(location = 3) out float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\nlayout(location = 0) in vec2 v_uv;\nlayout(location = 1) in vec2 v_uv1;\nlayout(location = 2) in vec4 v_worldPos;\nlayout(location = 3) in float v_clip_depth;\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\nout vec2 v_uv;\nout vec2 v_uv1;\nout vec4 v_worldPos;\nout float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec4 v_worldPos;\nin float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\n      uniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 albedo;\n   uniform vec4 albedoScaleAndCutoff;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nuniform highp mat4 cc_matLightView;\n  uniform lowp vec4 cc_shadowNFLSInfo;\n  uniform lowp vec4 cc_shadowLPNNInfo;\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture2D(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":182,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":64}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]}]}],[{"name":"opaque","passes":[{"program":"builtin-standard|standard-vs|standard-fs","properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["emissiveScaleParam",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]},{"name":"transparent","passes":[{"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORCE_FORWARD_SHADING":true},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["emissiveScaleParam",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]}]]],0,0,[],[],[]],[[{"name":"atom","rect":{"x":0,"y":0,"width":31,"height":31},"offset":{"x":0,"y":0},"originalSize":{"width":31,"height":31},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[4],[19]],[[{"name":"close_fill","rect":{"x":25,"y":25,"width":150,"height":150},"offset":{"x":0,"y":0},"originalSize":{"width":200,"height":200},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[4],[20]],[[[44,"scene0"],[45,"bg",33554432,[-5,-6,-7,-8,-9,-10],[[9,-1,[5,720,1600]],[35,0,-2],[61,17,-4,-3]],[1,0,-160,0]],[55,"Canvas",33554432,"50Y8JcUHtAuIGH2FDrzOkC",[-16,-17,1],[[[9,-11,[5,720,1280]],[67,-13,-12],[62,45,-14],-15],4,4,4,1],[1,360,640,0]],[56,"menu_bg",false,33554432,1,[-22,-23,-24],[[[9,-18,[5,544,460]],[14,0,-19,12],[21,17,88,270,-20,1],-21],4,4,4,1],[1,0,300,0]],[46,0,null,[25,"02pgz8C41aYqTZE2JW/1U6",-28,[69,"3axV9Kf+hM+Jl04iG4mCIO",null,[[37,[7,["02pgz8C41aYqTZE2JW/1U6"]],[[72,true,-27,[1,-0.1,2.9,-0.6],[1,4.4,7,4.7]]]]],[[12,"tu1c",["_name"],[7,["02pgz8C41aYqTZE2JW/1U6"]]],[16,["_lpos"],[7,["02pgz8C41aYqTZE2JW/1U6"]],[1,-90,0,-50]],[16,["_lrot"],[7,["02pgz8C41aYqTZE2JW/1U6"]],[3,0,0,0,1]],[22,["_euler"],-25,[1,0,0,0]],[12,false,["playOnLoad"],[7,["ec5ORga35Va45IXsK/PBUm"]]],[26,true,["_active"],-26]]],2]],[73,"scene0",[-32,-33,-34,-35,2],[68,"27459605-c148-4fab-929e-0f5c6e121118",[[74,["peopleAni"],4,[7,["ec5ORga35Va45IXsK/PBUm"]]],[75,["peopleAni"],-31,4,[7,["ec5ORga35Va45IXsK/PBUm"]]]],[-29,4,-30]],[76,[77,0.5208,[2,0.2,0.4980392156862745,0.8,0.520833125]],[78,[4,4283190348]],[79],[80],[81]]],[47,"people","9ao9AiXzZBDKzcqIau15/8",5,[-36,-37,-38,-39,4],[1,0,0,-12.943]],[48,"bgbox",33554432,2,[-42,-43],[[9,-40,[5,720,1280]],[63,45,720,1280,-41,2]]],[32,"bg_02",33554432,7,[[[34,-44,[5,11361,1280],[0,0,0.5]],[24,-45,3],[64,5,1280,-46],-47],4,4,4,1],[1,-11721,0,0]],[32,"bg_01",33554432,7,[[[34,-48,[5,13300,1280],[0,0,0.5]],[14,0,-49,4],[65,13,-12580,1280,-50,7],-51],4,4,4,1],[1,-12940,0,0]],[18,"stop",33554432,1,[[9,-52,[5,75,75]],[35,0,-53],[66,36,16.892999999999972,341.899,-54,1],[82,-55,15],[83,-56]],[1,305.607,-420.601,0]],[7,["42loSy0mhLn6bS5A2HHKD8"]],[49,"menu",false,33554432,1,[[9,-57,[5,176,213]],[24,-58,6],[36,17,866.4590000000001,-59,2],[38,-60,[[39,"1cb50SrGjFAhatz16Y2DRJk","showMenuBox",2]],7]],[1,0,-141.00900000000007,0],[1,0.7,0.7,1]],[29,0,null,5,[25,"cdLqyf/sNeEZEgJwW2vzbr",-62,[70,"8dZZ4k2mVGeKOt+fd/C74X",null,[[84,[7,["cdLqyf/sNeEZEgJwW2vzbr"]],[[50,"Node",-61]]]],[[37,[7,["8e2bRENVRd34EhH3A19BPp"]],[[85]]]],[[12,"chuan",["_name"],[7,["cdLqyf/sNeEZEgJwW2vzbr"]]],[16,["_lpos"],[7,["cdLqyf/sNeEZEgJwW2vzbr"]],[1,-89.784,-0.1,-63.008]],[16,["_lrot"],[7,["cdLqyf/sNeEZEgJwW2vzbr"]],[3,0,-0.013962180339145272,0,0.9999025240093042]],[16,["_euler"],[7,["cdLqyf/sNeEZEgJwW2vzbr"]],[1,0,-1.6,0]],[12,true,["_active"],[7,["e08Rn1DTJRSoUrR84fGrg5"]]],[12,true,["_active"],[7,["e4XUCUeMRfE4t9C0OLXG60"]]],[12,true,["_active"],[7,["71XfmzhzpRm5riCw6q/Noz"]]],[12,true,["_active"],[7,["c0jBaVc0JWB63xKWFVNVb3"]]]]],1]],[18,"p1",33554432,3,[[9,-63,[5,97,369]],[14,0,-64,8],[21,9,30.714,63.5,-65,3]],[1,-192.786,-18,0]],[18,"p2",33554432,3,[[9,-66,[5,97,369]],[14,0,-67,9],[21,9,156.85,63.5,-68,3]],[1,-66.65,-18,0]],[18,"close_fill",33554432,3,[[9,-69,[5,50,50]],[14,0,-70,10],[38,-71,[[39,"1cb50SrGjFAhatz16Y2DRJk","closeMenuBox",2]],11]],[1,221.628,158.903,0]],[30,"p0",false,33554432,1,[[9,-72,[5,97,369]],[14,0,-73,14],[21,9,19.942999999999984,252.11,-74,1]],[1,-291.557,363.39,0]],[30,"btn2",false,33554432,1,[[9,-75,[5,235,70]],[24,-76,16],[36,1,49.88900000000001,-77,1]],[1,0,715.111,0]],[57,"Main Camera","c9DMICJLFO5IeO07EPon7U",5,[-78,-79],[1,-91.861,6.524,-35.782]],[29,0,{},1,[25,"42loSy0mhLn6bS5A2HHKD8",-80,[71,"14gQV/NCtBCo2pdmpwK1A2",[[26,"Particle2D",["_name"],11],[22,["_lpos"],11,[1,-166.147,156.763,-1]],[22,["_lrot"],11,[3,0,0,0,1]],[22,["_euler"],11,[1,0,0,0]],[26,false,["_active"],11]]],5]],[51,"Main Light","c0y6F5f+pAvI805TdmxIjx",5,[[88,11276,1.6927083333333335,-81,[17]]],[3,-0.24999999999999997,-0.24999999999999997,-0.06698729810778066,0.9330127018922194],[1,-30,-30,0]],[89,21.221821460775477,1,6,1822425087,19],[40,19,[0]],[19,"Spot Light",6,[[91,13.9,60,15.625,11.8,109,-82,[17]]],[1,-90,5.415,-54.255],[3,-0.9360595357389733,0,0,0.3518416484047017],[1,-138.8,0,0]],[19,"Spot Light-001",6,[[41,0.6,498.3970260184439,10,73,-83,[17]]],[1,-87.127,6.001,-42.694],[3,-0.17240864277850654,0.11745846286606078,0.020711096115829844,0.977778001334708],[1,-20.000000000000007,13.700000000000001,-7.951386703658792e-16]],[19,"Spot Light-002",6,[[41,0.6,498.3970260184439,10,73,-84,[17]]],[1,-97.498,5.703,-45.083],[3,-0.19766590457232933,-0.2508733094460655,-0.05241016493470521,0.9461733178380684],[1,-23.6,-29.699999999999992,7.951386703658792e-16]],[19,"Spot Light-003",6,[[92,9910,9.1,60,15.625,16.7,80,-85,[17]]],[1,-90,1.131,-39.214],[3,0.08280820751220434,0,0,0.9965655024977614],[1,9.5,0,0]],[7,["02pgz8C41aYqTZE2JW/1U6"]],[58,"Camera",2,[-86],[1,0,0,1000]],[90,0,640,2000,6,41943040,29,[4,4278190080]],[86,8],[87,true,9],[40,3,[13]],[93,2,3,33,22,23,4,9,32,8,31]],0,[0,0,1,0,0,1,0,14,2,0,0,1,0,-1,20,0,-2,12,0,-3,3,0,-4,17,0,-5,10,0,-6,18,0,0,2,0,15,30,0,0,2,0,0,2,0,-4,34,0,-1,29,0,-2,7,0,0,3,0,0,3,0,0,3,0,-4,33,0,-1,14,0,-2,15,0,-3,16,0,12,28,0,12,28,0,0,4,0,6,4,0,-1,13,0,-3,20,0,16,34,0,-1,21,0,-2,19,0,-3,13,0,-4,6,0,-1,24,0,-2,25,0,-3,26,0,-4,27,0,0,7,0,0,7,0,-1,8,0,-2,9,0,0,8,0,0,8,0,0,8,0,-4,31,0,0,9,0,0,9,0,0,9,0,-4,32,0,0,10,0,0,10,0,0,10,0,0,10,0,0,10,0,0,12,0,0,12,0,0,12,0,0,12,0,2,13,0,6,13,0,0,14,0,0,14,0,0,14,0,0,15,0,0,15,0,0,15,0,0,16,0,0,16,0,0,16,0,0,17,0,0,17,0,0,17,0,0,18,0,0,18,0,0,18,0,-1,22,0,-2,23,0,6,20,0,0,21,0,0,24,0,0,25,0,0,26,0,0,27,0,-1,30,0,17,5,1,2,2,2,2,5,4,2,6,86],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,33,34],[-1,8,8,5,5,8,5,13,5,5,5,13,5,-1,5,18,5,9,9,19],[9,21,22,23,24,10,11,11,25,26,12,12,27,13,28,29,30,9,13,10]],[[[13,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{},{},{}],[[[{"occlusion":0.978,"roughness":0.53,"metallic":0.354,"SpecularIntensity":0.679},"mainColor",8,[4,4278213748],"albedoScale",8,[1,0.41568630933761597,0.3921568989753723,0.5490196347236633]],{},{}],11,0,0]]],0,0,[0],[3],[1]],[[[94,"vc0",".mp3",33.906939],-1],0,0,[],[],[]],[[[15,"_Color_0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.8069013357162476},"albedoScale",8,[1,0.7098039388656616,0.23137256503105164,0.08627451211214066]]],11]]],0,0,[0],[3],[1]],[[[15,"3DXY_Material_8",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.8069013357162476},"albedoScale",8,[1,0,0,0]]],11]]],0,0,[0],[3],[1]],[[{"name":"bg_02","rect":{"x":0,"y":0,"width":11361,"height":1280},"offset":{"x":0,"y":0},"originalSize":{"width":11361,"height":1280},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[4],[31]],[[{"name":"p0","rect":{"x":0,"y":0,"width":193,"height":738},"offset":{"x":0,"y":0},"originalSize":{"width":193,"height":738},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[4],[32]],[[[27,"Skin-0",2396351154,["Armature/mixamorig:Hips","Armature/mixamorig:Hips/mixamorig:Spine","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head/mixamorig:HeadTop_End","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2/mixamorig:LeftHandThumb3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2/mixamorig:LeftHandThumb3/mixamorig:LeftHandThumb4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2/mixamorig:LeftHandIndex3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2/mixamorig:LeftHandIndex3/mixamorig:LeftHandIndex4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2/mixamorig:LeftHandMiddle3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2/mixamorig:LeftHandMiddle3/mixamorig:LeftHandMiddle4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2/mixamorig:LeftHandRing3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2/mixamorig:LeftHandRing3/mixamorig:LeftHandRing4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2/mixamorig:RightHandThumb3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2/mixamorig:RightHandThumb3/mixamorig:RightHandThumb4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3/mixamorig:RightHandIndex4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2/mixamorig:RightHandMiddle3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2/mixamorig:RightHandMiddle3/mixamorig:RightHandMiddle4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2/mixamorig:RightHandRing3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2/mixamorig:RightHandRing3/mixamorig:RightHandRing4","Armature/mixamorig:Hips/mixamorig:LeftUpLeg","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase/mixamorig:LeftToe_End","Armature/mixamorig:Hips/mixamorig:RightUpLeg","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase/mixamorig:RightToe_End"],[[[7,23.618122100830078,-1.1541878564003127e-9,-0.17202045023441315,0,0.027759602293372154,-23.309186935424805,3.811347484588623,0,-0.16976585984230042,-3.811448812484741,-23.308570861816406,0,-0.34165191650390625,2.6901192665100098,0.3903913199901581,1],[7,23.618122100830078,0.004038060549646616,-0.1719730645418167,0,0.027759604156017303,-23.39223289489746,3.2631304264068604,0,-0.16976585984230042,-3.2632462978363037,-23.391618728637695,0,-0.34165191650390625,2.35988712310791,0.45343247056007385,1],[7,23.618122100830078,0.004038061946630478,-0.1719730645418167,0,0.027759604156017303,-23.39223289489746,3.2631301879882812,0,-0.16976585984230042,-3.2632460594177246,-23.391618728637695,0,-0.34165191650390625,1.9861726760864258,0.45343247056007385,1],[7,23.618122100830078,0.004038053099066019,-0.1719730645418167,0,0.027759604156017303,-23.39223289489746,3.2631313800811768,0,-0.16976585984230042,-3.26324725151062,-23.391618728637695,0,-0.34165191650390625,1.5590702295303345,0.4534323811531067,1],[7,23.618122100830078,-9.143226176178132e-10,-0.17202045023441315,0,0.027759602293372154,-23.309188842773438,3.811347484588623,0,-0.16976585984230042,-3.8114495277404785,-23.308570861816406,0,-0.34165191650390625,1.0889270305633545,0.4279884994029999,1],[7,23.618122100830078,-1.1541911870693866e-9,-0.17202045023441315,0,0.027759602293372154,-23.309188842773438,3.811347484588623,0,-0.16976585984230042,-3.8114495277404785,-23.308570861816406,0,-0.34165191650390625,0.6847864389419556,0.3882410526275635,1],[7,23.618122100830078,-1.1541911870693866e-9,-0.17202045023441315,0,0.027759602293372154,-23.309188842773438,3.811347484588623,0,-0.16976585984230042,-3.8114495277404785,-23.308570861816406,0,-0.34165191650390625,-0.6764296889305115,0.2543647289276123,1],[7,-0.25671201944351196,21.929731369018555,-8.767338752746582,0,-3.256455898284912,8.65124225616455,21.73469352722168,0,23.391775131225586,1.4450386762619019,2.929550886154175,0,-0.4475995898246765,-0.9329456090927124,-0.8740271329879761,1],[7,-0.7556779384613037,23.235227584838867,-4.171137809753418,0,-3.452483892440796,4.019622325897217,23.016693115234375,0,23.352832794189453,1.3461339473724365,3.2678158283233643,0,-0.41640618443489075,-1.1711825132369995,-1.1332582235336304,1],[7,-0.002215934917330742,23.618566513061523,0.09163009375333786,0,-3.3203883171081543,-0.09103161096572876,23.384016036987305,0,23.384193420410156,-0.010687693022191525,3.3203718662261963,0,-0.4662405252456665,-1.3004603385925293,-1.390709638595581,1],[7,-7.496315002441406,22.391944885253906,-0.5012226104736328,0,-4.526247978210449,-0.9968798160552979,23.159547805786133,0,21.935447692871094,7.446621417999268,4.607544898986816,0,0.20947010815143585,-1.8515708446502686,-1.3690810203552246,1],[7,7.006463527679443,22.555139541625977,-0.1424739956855774,0,-4.255195140838623,1.4682788848876953,23.185832977294922,0,22.15058135986328,-6.852370738983154,4.499137878417969,0,-0.8906958103179932,-1.656510591506958,-1.3947510719299316,1],[7,7.006451606750488,22.548547744750977,0.563781201839447,0,-4.255187034606934,0.7416220903396606,23.220439910888672,0,22.150588989257812,-6.98986291885376,4.282379150390625,0,-0.8733806014060974,-1.6549994945526123,-1.4472770690917969,1],[7,7.006464004516602,22.111000061035156,-4.456221103668213,0,-4.255196571350098,5.878216743469238,22.476322174072266,0,22.150575637817383,-5.864724159240723,5.727325916290283,0,-0.8808320760726929,-1.9801125526428223,-1.03346848487854,1],[7,7.006465435028076,22.111007690429688,-4.456218719482422,0,-4.255198001861572,5.878215789794922,22.476327896118164,0,22.15058135986328,-5.864726543426514,5.727325439453125,0,-0.890696108341217,-2.019979476928711,-1.0334689617156982,1],[7,-0.4868646264076233,23.182592391967773,4.491724491119385,0,-4.61774206161499,-4.499407768249512,22.72173500061035,0,23.157827377319336,-0.40981054306030273,4.625216960906982,0,-0.32579678297042847,-1.567561388015747,-1.7432706356048584,1],[7,-0.486863374710083,23.60556411743164,-0.620587170124054,0,-4.617743968963623,0.5135599374771118,23.157245635986328,0,23.157827377319336,0.598682165145874,4.604581832885742,0,-0.3257230520248413,-1.9511303901672363,-1.3538662195205688,1],[7,-0.48686495423316956,20.39238929748535,-11.906244277954102,0,-4.617741107940674,11.596633911132812,20.050931930541992,0,23.157827377319336,2.7411296367645264,3.7479031085968018,0,-0.3257124722003937,-2.404548406600952,-0.22413600981235504,1],[7,-0.48686483502388,20.39238739013672,-11.906246185302734,0,-4.617741107940674,11.596634864807129,20.050931930541992,0,23.157827377319336,2.7411296367645264,3.7479031085968018,0,-0.3257969617843628,-2.4384002685546875,-0.22413566708564758,1],[7,0.5222717523574829,23.51591682434082,2.1387131214141846,0,-4.596584320068359,-1.997063159942627,23.080913543701172,0,23.16126251220703,-0.9266064167022705,4.532413005828857,0,-0.4566534459590912,-1.7232080698013306,-1.5723764896392822,1],[7,0.5222738981246948,23.594663619995117,-0.9297369122505188,0,-4.59658670425415,1.0137628316879272,23.14495849609375,0,23.161264419555664,-0.3308553397655487,4.614316940307617,0,-0.4566613733768463,-1.9501324892044067,-1.3306560516357422,1],[7,0.5222761034965515,23.062713623046875,-5.067901611328125,0,-4.596590995788574,5.07146692276001,22.605243682861328,0,23.1612606048584,0.4864310324192047,4.600522994995117,0,-0.45665886998176575,-2.191322088241577,-0.9599668979644775,1],[7,0.5222761034965515,23.062715530395508,-5.067902088165283,0,-4.596590995788574,5.071467876434326,22.605241775512695,0,23.1612606048584,0.48643121123313904,4.600523471832275,0,-0.4566534757614136,-2.2177371978759766,-0.9599671363830566,1],[7,-3.1026651859283447,23.411361694335938,-0.3562075197696686,0,-4.633224964141846,-0.2616744041442871,23.158370971679688,0,22.951086044311523,3.112062931060791,4.626917362213135,0,-0.20806805789470673,-1.9306190013885498,-1.3814821243286133,1],[7,-3.102674961090088,23.40253448486328,0.7346854209899902,0,-4.633227348327637,-1.3401141166687012,23.121044158935547,0,22.95108413696289,2.893171548843384,4.7668585777282715,0,-0.2080388069152832,-1.892623782157898,-1.4712371826171875,1],[7,-3.1026856899261475,23.04944610595703,4.115993499755859,0,-4.633212089538574,-4.674274444580078,22.683252334594727,0,22.951082229614258,2.1723721027374268,5.135573387145996,0,-0.20803196728229523,-1.6874374151229858,-1.7338826656341553,1],[7,-3.1026856899261475,23.049449920654297,4.11599063873291,0,-4.633212089538574,-4.674272060394287,22.68325424194336,0,22.951082229614258,2.172372817993164,5.135573387145996,0,-0.20806705951690674,-1.7040318250656128,-1.7338820695877075,1],[7,-0.18913359940052032,-21.929683685302734,8.769186973571777,0,3.2638602256774902,8.66105842590332,21.72967529296875,0,-23.391386032104492,1.385814905166626,2.9610939025878906,0,0.4536305367946625,-0.2916598320007324,-1.1305898427963257,1],[7,-1.732446312904358,-23.182828903198242,4.171377658843994,0,3.8654704093933105,3.8461358547210693,22.980661392211914,0,-23.235795974731445,2.368335247039795,3.512012243270874,0,0.401510626077652,-0.5105417370796204,-1.2597180604934692,1],[7,-0.2511483132839203,-23.617231369018555,-0.0935087651014328,0,3.6124393939971924,-0.1308281570672989,23.340490341186523,0,-23.339509963989258,0.23388753831386566,3.613598585128784,0,0.45706066489219666,-0.6153878569602966,-1.393702745437622,1],[7,-7.768221378326416,-22.292673110961914,-0.7327355146408081,0,3.0744667053222656,-1.8386855125427246,23.345504760742188,0,-22.09180450439453,7.582969665527344,3.506596565246582,0,0.09995337575674057,-1.156734824180603,-1.4207696914672852,1],[7,5.084039688110352,-23.06182289123535,0.3874869644641876,0,3.581982374191284,1.1814091205596924,23.315645217895508,0,-22.785240173339844,-4.960029602050781,3.7518250942230225,0,0.6698500514030457,-1.0510129928588867,-1.373827576637268,1],[7,5.0840229988098145,-23.064788818359375,0.11552336812019348,0,3.5819664001464844,0.9063911437988281,23.327953338623047,0,-22.785249710083008,-5.003908157348633,3.6930599212646484,0,0.6521050333976746,-1.0754268169403076,-1.386604905128479,1],[7,5.084023475646973,-22.885311126708984,2.8741674423217773,0,3.5819668769836426,3.690838575363159,23.051965713500977,0,-22.785249710083008,-4.526130676269531,4.265203475952148,0,0.6524447202682495,-1.2828598022460938,-1.2420445680618286,1],[7,5.084025859832764,-22.885311126708984,2.8741655349731445,0,3.581969738006592,3.690838098526001,23.05196189880371,0,-22.785249710083008,-4.526132583618164,4.2652058601379395,0,0.66985023021698,-1.3208204507827759,-1.2420443296432495,1],[7,0.5025246143341064,-23.58266830444336,1.2044094800949097,0,3.5228939056396484,1.2660739421844482,23.320205688476562,0,-23.34913444519043,-0.316526859998703,3.5444509983062744,0,0.4757227599620819,-1.2334758043289185,-1.3222925662994385,1],[7,0.5025265216827393,-23.609737396240234,0.4161314070224762,0,3.5228943824768066,0.48652786016464233,23.349475860595703,0,-23.349136352539062,-0.4347284734249115,3.531902551651001,0,0.4757145643234253,-1.2378278970718384,-1.3643934726715088,1],[7,0.5025249719619751,-23.242725372314453,-4.167555809020996,0,3.5228896141052246,-4.048052787780762,23.00104522705078,0,-23.349138259887695,-1.1110001802444458,3.3806750774383545,0,0.47569218277931213,-0.9940245747566223,-1.587139368057251,1],[7,0.5025249123573303,-23.24272918701172,-4.167555809020996,0,3.5228896141052246,-4.0480523109436035,23.001047134399414,0,-23.349138259887695,-1.1110002994537354,3.380676031112671,0,0.47572311758995056,-1.023048996925354,-1.5871392488479614,1],[7,0.5298900604248047,-23.612030029296875,-0.19157250225543976,0,3.52364182472229,-0.11040437966585159,23.354171752929688,0,-23.348413467407227,-0.5525346398353577,3.5201640129089355,0,0.5270717740058899,-1.1532632112503052,-1.3949368000030518,1],[7,0.5298917293548584,-23.567354202270508,1.4643065929412842,0,3.523643970489502,1.5271965265274048,23.304445266723633,0,-23.348413467407227,-0.30438268184661865,3.5502419471740723,0,0.5270875692367554,-1.2866560220718384,-1.3079487085342407,1],[7,0.5298944711685181,-23.60655975341797,-0.5429506897926331,0,3.523650646209717,-0.4579530656337738,23.349939346313477,0,-23.348411560058594,-0.6048657298088074,3.511559247970581,0,0.5270618200302124,-1.2092599868774414,-1.4157880544662476,1],[7,0.5298944711685181,-23.60655975341797,-0.5429505109786987,0,3.523650646209717,-0.4579528272151947,23.34994125366211,0,-23.348411560058594,-0.6048656702041626,3.511559247970581,0,0.5270715951919556,-1.2362786531448364,-1.4157886505126953,1],[7,0.4092020094394684,-23.50867462158203,2.2405643463134766,0,3.520297050476074,2.2765862941741943,23.243717193603516,0,-23.351346969604492,-0.06875570863485336,3.543334484100342,0,0.5683415532112122,-1.2962660789489746,-1.2664340734481812,1],[7,0.4092020094394684,-23.520130157470703,-2.116960287094116,0,3.520299196243286,-2.032867431640625,23.266292572021484,0,-23.351350784301758,-0.7186217904090881,3.4703803062438965,0,0.5684539675712585,-1.0647364854812622,-1.4873842000961304,1],[7,0.4091932475566864,-23.334152221679688,-3.6325294971466064,0,3.5202884674072266,-3.532210111618042,23.086284637451172,0,-23.35135269165039,-0.9413837194442749,3.416675567626953,0,0.5684347748756409,-0.9939605593681335,-1.5548701286315918,1],[7,0.409193217754364,-23.334157943725586,-3.6325294971466064,0,3.5202884674072266,-3.532209873199463,23.086286544799805,0,-23.35135269165039,-0.9413836598396301,3.4166760444641113,0,0.5683417320251465,-1.0106456279754639,-1.5548701286315918,1],[7,-23.625818252563477,0.20322857797145844,-0.1490444540977478,0,0.17445018887519836,23.261669158935547,4.090629577636719,0,0.18192757666110992,4.086459636688232,-23.277996063232422,0,0.6652097105979919,-2.8784756660461426,0.3724999725818634,1],[7,-23.62601089477539,0.18191859126091003,-0.14527122676372528,0,0.15230105817317963,23.218494415283203,4.330116271972656,0,0.17610162496566772,4.3259663581848145,-23.234664916992188,0,0.6687480211257935,-3.6409926414489746,0.3349429965019226,1],[7,-23.576566696166992,1.4071805477142334,0.5776019096374512,0,0.45527467131614685,15.096199035644531,-18.169416427612305,0,-1.4510080814361572,-18.127792358398438,-15.086028099060059,0,0.6904769539833069,-1.7145782709121704,3.6545298099517822,1],[7,-23.583898544311523,1.1994216442108154,-0.7363758683204651,0,0.9222145676612854,3.8304519653320312,-23.288326263427734,0,-1.0627386569976807,-23.29315948486328,-3.8675756454467773,0,0.5961788296699524,0.2441083788871765,4.112617015838623,1],[7,-23.583892822265625,1.199421763420105,-0.7365520596504211,0,0.9223887324333191,3.8304524421691895,-23.288318634033203,0,-1.0627096891403198,-23.29316520690918,-3.8675830364227295,0,0.5960561037063599,0.14697889983654022,4.112616539001465,1],[7,-23.61509895324707,-0.19762106239795685,-0.16565555334091187,0,-0.22418485581874847,23.2326602935791,4.2451982498168945,0,0.12747405469417572,4.248470306396484,-23.22248077392578,0,0.018739519640803337,-2.875063896179199,0.34905311465263367,1],[7,-23.61533546447754,-0.17561990022659302,-0.15584315359592438,0,-0.20019809901714325,23.252779006958008,4.134923934936523,0,0.12272743880748749,4.137940883636475,-23.24244499206543,0,0.015368973836302757,-3.632981777191162,0.3663000464439392,1],[7,-23.54411506652832,-1.6873055696487427,-0.7722082734107971,0,-0.49618664383888245,15.187247276306152,-18.074817657470703,0,1.788547158241272,-17.998079299926758,-15.179611206054688,0,-0.010916518978774548,-1.6917006969451904,3.6615662574768066,1],[7,-23.556640625,-1.445739507675171,0.8699644207954407,0,-1.0944105386734009,3.8215510845184326,-23.281496047973633,0,1.2848597764968872,-23.251123428344727,-3.8806381225585938,0,0.11028406769037247,0.2835962772369385,4.090695381164551,1],[7,-23.5566463470459,-1.44573974609375,0.8699086904525757,0,-1.0943554639816284,3.821549892425537,-23.28150177001953,0,1.2848693132400513,-23.251123428344727,-3.880633592605591,0,0.11023615300655365,0.1817236840724945,4.090699672698975,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[2,".bin",1934811748,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":113688,"length":16704,"count":8352,"stride":2}},{"primitiveMode":7,"jointMapIndex":1,"vertexBundelIndices":[1],"indexView":{"offset":437976,"length":46086,"count":23043,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":113688,"count":1579,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":130392,"length":307584,"count":4272,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,7,8,9,10,11,12,13,15,16,17,19,20,21,23,24,25,47,48,49,50,52],[0,1,2,3,4,5,27,28,29,30,31,32,33,35,36,37,39,40,41,43,44,45,47,52,53,54,55]]},"minPosition",8,[1,-0.0291471965610981,-0.013213235884904861,-0.04461849108338356],"maxPosition",8,[1,0.0291471965610981,0.012771069072186947,0.06578922271728516]]],-1],0,0,[],[],[]],[[[27,"Skin-2",3029679328,["Armature/mixamorig:Hips","Armature/mixamorig:Hips/mixamorig:Spine","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head/mixamorig:HeadTop_End","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2/mixamorig:LeftHandThumb3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2/mixamorig:LeftHandThumb3/mixamorig:LeftHandThumb4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2/mixamorig:LeftHandIndex3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2/mixamorig:LeftHandIndex3/mixamorig:LeftHandIndex4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2/mixamorig:LeftHandMiddle3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2/mixamorig:LeftHandMiddle3/mixamorig:LeftHandMiddle4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2/mixamorig:LeftHandRing3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2/mixamorig:LeftHandRing3/mixamorig:LeftHandRing4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2/mixamorig:RightHandThumb3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2/mixamorig:RightHandThumb3/mixamorig:RightHandThumb4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3/mixamorig:RightHandIndex4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2/mixamorig:RightHandMiddle3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2/mixamorig:RightHandMiddle3/mixamorig:RightHandMiddle4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2/mixamorig:RightHandRing3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2/mixamorig:RightHandRing3/mixamorig:RightHandRing4","Armature/mixamorig:Hips/mixamorig:LeftUpLeg","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase/mixamorig:LeftToe_End","Armature/mixamorig:Hips/mixamorig:RightUpLeg","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase/mixamorig:RightToe_End"],[[[7,56.553260803222656,1.7322595624591486e-7,-1.592561318375374e-7,0,-1.5925610341582797e-7,-0.000009212641998601612,-56.553260803222656,0,-1.7322597045676957e-7,56.55325698852539,-0.00000921264108910691,0,1.2516975012033527e-8,1.1122958660125732,0.06619476526975632,1],[7,56.553260803222656,1.7691667153485469e-7,-1.551458979065501e-7,0,-1.5925610341582797e-7,1.3275395631790161,-56.537681579589844,0,-1.732259846676243e-7,56.53767776489258,1.3275394439697266,0,1.2516975012033527e-8,0.7901087999343872,0.09228689968585968,1],[7,56.553260803222656,1.7691667153485469e-7,-1.551458979065501e-7,0,-1.5925610341582797e-7,1.3275400400161743,-56.537681579589844,0,-1.732259846676243e-7,56.53767776489258,1.3275399208068848,0,1.2516975012033527e-8,0.4163942039012909,0.09228689968585968,1],[7,56.553260803222656,1.7691665732399997e-7,-1.551459121174048e-7,0,-1.5925611762668268e-7,1.327537178993225,-56.537681579589844,0,-1.732259846676243e-7,56.53767776489258,1.3275370597839355,0,1.2516975012033527e-8,-0.010708322748541832,0.09228689968585968,1],[7,56.553260803222656,1.7322597045676957e-7,-1.592561318375374e-7,0,-1.5925610341582797e-7,-0.000009133785169979092,-56.553260803222656,0,-1.7322597045676957e-7,56.55326461791992,-0.000009133783350989688,0,1.2516975012033527e-8,-0.48889678716659546,0.1037919819355011,1],[7,56.553260803222656,1.7322597045676957e-7,-1.592561318375374e-7,0,-1.5925610341582797e-7,-0.000009212643817591015,-56.553260803222656,0,-1.7322597045676957e-7,56.55326461791992,-0.000009212641998601612,0,1.2516975012033527e-8,-0.8930374383926392,0.0640445351600647,1],[7,56.553260803222656,1.7322597045676957e-7,-1.592561318375374e-7,0,-1.5925610341582797e-7,-0.000009212643817591015,-56.553260803222656,0,-1.7322597045676957e-7,56.55326461791992,-0.000009212641998601612,0,1.2516975012033527e-8,-2.254253625869751,-0.06983179599046707,1],[7,-1.0264097452163696,52.50712585449219,-20.981407165527344,0,56.527992248535156,0.4543037414550781,-1.6284266710281372,0,-1.343372106552124,-21.001583099365234,-52.491905212402344,0,-0.09226865321397781,-0.027193482965230942,0.45439672470092773,1],[7,-2.220994472503662,55.62161636352539,-9.978667259216309,0,56.503013610839844,2.0329558849334717,-1.2443102598190308,0,-0.8651023507118225,-10.01866626739502,-55.65202713012695,0,-0.0817788690328598,-0.5439862608909607,0.3520045876502991,1],[7,-0.41710415482521057,56.55125045776367,0.22805742919445038,0,56.539222717285156,0.42180490493774414,-1.1877086162567139,0,-1.1893675327301025,0.21924085915088654,-56.54032897949219,0,-0.11146095395088196,-0.9625192284584045,0.1813221573829651,1],[7,-18.339126586914062,53.4833869934082,-1.2142293453216553,0,53.45110321044922,18.371868133544922,1.930242657661438,0,2.2199177742004395,-0.5216838121414185,-56.50726318359375,0,0.34315717220306396,-1.4085915088653564,0.21118910610675812,1],[7,16.38279151916504,54.127166748046875,-0.35331666469573975,0,54.107643127441406,-16.3659725189209,1.6701784133911133,0,1.4962824583053589,-0.8218676447868347,-56.527488708496094,0,-0.5232923030853271,-1.400404930114746,0.18979352712631226,1],[7,16.382761001586914,54.111698150634766,1.3415396213531494,0,54.1076545715332,-16.41020965576172,1.1569297313690186,0,1.496260166168213,0.9483774304389954,-56.525508880615234,0,-0.5059766173362732,-1.4486302137374878,0.14450891315937042,1],[7,16.38279151916504,53.059146881103516,-10.705110549926758,0,54.107627868652344,-15.743875503540039,4.771275520324707,0,1.4962868690490723,-11.624347686767578,-55.32545471191406,0,-0.513428807258606,-1.4255058765411377,0.47277912497520447,1],[7,16.382795333862305,53.05916976928711,-10.705102920532227,0,54.107643127441406,-15.743877410888672,4.771273612976074,0,1.4962884187698364,-11.624342918395996,-55.32546615600586,0,-0.5232927203178406,-1.4653728008270264,0.47277915477752686,1],[7,-1.5772823095321655,55.501834869384766,10.739141464233398,0,56.49715042114258,1.1744210720062256,2.2282402515411377,0,1.9637978076934814,10.790628433227539,-55.479522705078125,0,-0.06623993813991547,-1.5265849828720093,-0.11775282025337219,1],[7,-1.5772793292999268,56.51133728027344,-1.4999862909317017,0,56.49715042114258,1.627899169921875,1.9220483303070068,0,1.963801622390747,-1.444891095161438,-56.500675201416016,0,-0.06616628170013428,-1.5600875616073608,0.22444672882556915,1],[7,-1.5772831439971924,48.812156677246094,-28.515897750854492,0,56.49715042114258,2.352067232131958,0.9011641144752502,0,1.9637962579727173,-28.462465286254883,-48.829315185546875,0,-0.06615559756755829,-1.3020824193954468,0.9710858464241028,1],[7,-1.5772826671600342,48.81214904785156,-28.51590347290039,0,56.49715042114258,2.3520667552948,0.9011639952659607,0,1.9637961387634277,-28.46246910095215,-48.829315185546875,0,-0.06624004244804382,-1.335934042930603,0.9710862040519714,1],[7,0.838952898979187,56.31586837768555,5.107796669006348,0,56.514686584472656,-1.007814884185791,1.8291287422180176,0,1.9124746322631836,5.077176570892334,-56.292415618896484,0,-0.18096710741519928,-1.5304197072982788,0.03951244056224823,1],[7,0.8389579653739929,56.50263595581055,-2.2404041290283203,0,56.51469421386719,-0.7620384097099304,1.9444084167480469,0,1.912479043006897,-2.2677204608917236,-56.475406646728516,0,-0.180975079536438,-1.549885869026184,0.24260719120502472,1],[7,0.8389632701873779,55.226318359375,-12.14993667602539,0,56.514686584472656,-0.4079285264015198,2.0481882095336914,0,1.9124904870986938,-12.17203140258789,-55.194705963134766,0,-0.18097293376922607,-1.520427942276001,0.5182939171791077,1],[7,0.8389634490013123,55.226322174072266,-12.14993667602539,0,56.514686584472656,-0.4079287350177765,2.0481884479522705,0,1.912490725517273,-12.172032356262207,-55.194705963134766,0,-0.1809675246477127,-1.5468429327011108,0.5182938575744629,1],[7,-7.836933612823486,56.00090026855469,-0.8673478960990906,0,55.968990325927734,7.8631134033203125,1.9790019989013672,0,2.080268383026123,-0.5841442346572876,-56.51197052001953,0,0.007395513355731964,-1.5309306383132935,0.20129460096359253,1],[7,-7.83695650100708,55.98050308227539,1.742127776145935,0,55.96898651123047,7.762418270111084,2.3431270122528076,0,2.080275058746338,2.048830270767212,-56.47783279418945,0,0.007424390409141779,-1.567095160484314,0.12843868136405945,1],[7,-7.836982250213623,55.13810348510742,9.830615043640137,0,55.96897506713867,7.341302871704102,3.442516803741455,0,2.0802395343780518,10.206096649169922,-55.585784912109375,0,0.007432035636156797,-1.5969979763031006,-0.10392770916223526,1],[7,-7.836982250213623,55.13811111450195,9.830609321594238,0,55.96897506713867,7.341304302215576,3.4425156116485596,0,2.0802392959594727,10.206090927124023,-55.585784912109375,0,0.007396943401545286,-1.613592267036438,-0.10392706841230392,1],[7,-0.04109061136841774,-52.50700759887695,21.006771087646484,0,-56.53771209716797,-0.45430195331573486,-1.2461318969726562,0,1.3257246017456055,-21.001895904541016,-52.49223327636719,0,0.09228722006082535,-0.025523319840431213,0.45369553565979004,1],[7,-3.7373201847076416,-55.5379524230957,9.99200439453125,0,-56.429420471191406,3.7059383392333984,-0.5078707337379456,0,-0.15602374076843262,-10.003686904907227,-55.66123962402344,0,0.05979873239994049,-0.5457146763801575,0.3506711721420288,1],[7,-0.18948796391487122,-56.552520751953125,-0.22040051221847534,0,-56.55089569091797,0.1913580447435379,-0.48123353719711304,0,0.481972873210907,0.2187788337469101,-56.55078125,0,0.11828579753637314,-0.9620422124862671,0.17996147274971008,1],[7,-18.21104621887207,-53.5123405456543,-1.7490828037261963,0,-53.525821685791016,18.24005889892578,-0.747160792350769,0,1.2711143493652344,1.4148520231246948,-56.52128601074219,0,-0.352369487285614,-1.4149271249771118,0.14131192862987518,1],[7,12.575242042541504,-55.12959289550781,0.9288269877433777,0,-55.13636016845703,-12.57909107208252,-0.13661803305149078,0,0.3397768437862396,-0.875177264213562,-56.54548263549805,0,0.42026615142822266,-1.4317578077316284,0.20860712230205536,1],[7,12.575201988220215,-55.136714935302734,0.2786945700645447,0,-55.13637161254883,-12.576563835144043,-0.2849787175655365,0,0.3398178517818451,-0.20834411680698395,-56.551856994628906,0,0.40251970291137695,-1.4748045206069946,0.19122977554798126,1],[7,12.575204849243164,-54.70736312866211,6.873254776000977,0,-55.136375427246094,-12.520331382751465,1.2217302322387695,0,0.3398173153400421,-6.972714900970459,-56.12076187133789,0,0.4028593599796295,-1.490596890449524,0.3722389340400696,1],[7,12.575209617614746,-54.70736312866211,6.873250484466553,0,-55.13637161254883,-12.52033519744873,1.2217378616333008,0,0.339809387922287,-6.972712993621826,-56.12075424194336,0,0.4202651381492615,-1.5285577774047852,0.37223920226097107,1],[7,1.6149892807006836,-56.45635986328125,2.8884146213531494,0,-56.52589797973633,-1.6483999490737915,-0.614154040813446,0,0.697292149066925,-2.8694775104522705,-56.47612762451172,0,0.14198507368564606,-1.5039340257644653,0.26730790734291077,1],[7,1.614993929862976,-56.521331787109375,1.0012924671173096,0,-56.52589797973633,-1.6269733905792236,-0.66886305809021,0,0.6972912549972534,-0.9817069172859192,-56.54044723510742,0,0.14197692275047302,-1.5612242221832275,0.21528738737106323,1],[7,1.6149901151657104,-55.64369583129883,-9.972078323364258,0,-56.52589797973633,-1.4664866924285889,-0.9715150594711304,0,0.6973031163215637,9.994996070861816,-55.65865707397461,0,0.1419541984796524,-1.6174465417861938,-0.10008814185857773,1],[7,1.614989995956421,-55.643699645996094,-9.972079277038574,0,-56.52589797973633,-1.4664868116378784,-0.9715152978897095,0,0.6973032355308533,9.994996070861816,-55.65866470336914,0,0.14198513329029083,-1.6464710235595703,-0.1000877395272255,1],[7,1.6805015802383423,-56.52647399902344,-0.453553706407547,0,-56.52400588989258,-1.6747400760650635,-0.7090135216712952,0,0.6952459812164307,0.47438761591911316,-56.54701232910156,0,0.1937977820634842,-1.5175890922546387,0.17590773105621338,1],[7,1.6805057525634766,-56.41917037963867,3.5105576515197754,0,-56.52400588989258,-1.7203305959701538,-0.5898494124412537,0,0.6952404975891113,-3.491213083267212,-56.44112777709961,0,0.19381378591060638,-1.539955735206604,0.2845729887485504,1],[7,1.6805121898651123,-56.51345443725586,-1.2947429418563843,0,-56.52400588989258,-1.6640137434005737,-0.7338377833366394,0,0.6952247023582458,1.3158793449401855,-56.53368377685547,0,0.19378849864006042,-1.5969232320785522,0.14946076273918152,1],[7,1.6805121898651123,-56.51345443725586,-1.294742465019226,0,-56.52400588989258,-1.6640136241912842,-0.733837902545929,0,0.6952248215675354,1.3158787488937378,-56.533687591552734,0,0.1937982439994812,-1.6239418983459473,0.1494603157043457,1],[7,1.3915722370147705,-56.28061294555664,5.369144916534424,0,-56.5317497253418,-1.4520803689956665,-0.5691676735877991,0,0.7042832374572754,-5.353096008300781,-56.29494857788086,0,0.23302558064460754,-1.4952449798583984,0.3333561420440674,1],[7,1.3915722370147705,-56.308982849121094,-5.063013076782227,0,-56.53175354003906,-1.3227834701538086,-0.82627272605896,0,0.7042794823646545,5.081418991088867,-56.32011413574219,0,0.2331380695104599,-1.554266095161438,0.04861084371805191,1],[7,1.3915512561798096,-55.86407470703125,-8.691411972045898,0,-56.53175354003906,-1.266595721244812,-0.9100527763366699,0,0.7043049931526184,8.710498809814453,-55.873992919921875,0,0.23311801254749298,-1.581730842590332,-0.053721778094768524,1],[7,1.3915512561798096,-55.86408233642578,-8.691412925720215,0,-56.53175354003906,-1.2665958404541016,-0.9100528955459595,0,0.7043050527572632,8.710498809814453,-55.874000549316406,0,0.2330249845981598,-1.5984159708023071,-0.05372173339128494,1],[7,-56.571327209472656,0.48173514008522034,0.05527237430214882,0,-0.049527350813150406,0.6717584133148193,-56.58852767944336,0,-0.4825287461280823,-56.547237396240234,-0.6717779636383057,0,0.33662715554237366,-1.294058918952942,0.06717739999294281,1],[7,-56.57175064086914,0.4264678657054901,0.06423506140708923,0,-0.05473921447992325,1.2540160417556763,-56.5786018371582,0,-0.4279383718967438,-56.537757873535156,-1.2544372081756592,0,0.3386100232601166,-2.0538363456726074,0.04598753899335861,1],[7,-56.42450714111328,3.7237675189971924,1.5914920568466187,0,-4.015763759613037,-48.643978118896484,-28.617441177368164,0,-0.5151671767234802,-28.668394088745117,48.76423645019531,0,0.3409551978111267,-1.1710960865020752,2.1395809650421143,1],[7,-56.447425842285156,3.283513069152832,-1.762123465538025,0,-3.2788398265838623,-56.50031280517578,-0.15353737771511078,0,-1.7685908079147339,-0.05110872536897659,56.52565002441406,0,0.2857133448123932,-0.05852246284484863,2.5240378379821777,1],[7,-56.44741439819336,3.283513307571411,-1.762545108795166,0,-3.2788383960723877,-56.50032424926758,-0.15356023609638214,0,-1.7690134048461914,-0.051107119768857956,56.525634765625,0,0.2856024205684662,-0.15565206110477448,2.5240354537963867,1],[7,-56.54584503173828,-0.4809126555919647,0.014979016967117786,0,-0.023985615000128746,1.0588014125823975,-56.51736068725586,0,0.4805022180080414,-56.541290283203125,-1.0584803819656372,0,-0.3364110291004181,-1.2944098711013794,0.054683998227119446,1],[7,-56.546268463134766,-0.4262751042842865,0.03850661218166351,0,-0.0444740429520607,0.7902343273162842,-56.521751403808594,0,0.4256546199321747,-56.546119689941406,-0.7901839017868042,0,-0.33837130665779114,-2.0534026622772217,0.06456248462200165,1],[7,-56.40523910522461,-3.687518835067749,-1.6385610103607178,0,4.007427215576172,-48.42661666870117,-28.898664474487305,0,0.4814198911190033,-28.93366241455078,48.57686233520508,0,-0.3421327769756317,-1.184345006942749,2.1307191848754883,1],[7,-56.42824935913086,-3.0507009029388428,2.0842761993408203,0,3.048152446746826,-56.44367218017578,-0.15902844071388245,0,2.089669942855835,-0.04631808027625084,56.514556884765625,0,-0.27144014835357666,-0.0571100153028965,2.5256316661834717,1],[7,-56.42825698852539,-3.050701379776001,2.0841424465179443,0,3.048153877258301,-56.44367218017578,-0.15901806950569153,0,2.08953595161438,-0.04631490260362625,56.514564514160156,0,-0.271484375,-0.15898272395133972,2.525634765625,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[2,".bin",931777963,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":142848,"length":11520,"count":2880,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":142848,"count":1984,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,5]]},"minPosition",8,[1,-0.009999997913837433,-0.01000000350177288,-0.009999999776482582],"maxPosition",8,[1,0.010000002570450306,0.009999999776482582,0.009999999776482582]]],-1],0,0,[],[],[]],[[[42],[59,"tu1c",[[[31,"Light",-4,[0,"9dfcp9UyBdZa1ZMC7+iEVY",-3,0],[1,4.076245307922363,5.903862476348877,-1.0054539442062378],[3,0.1690757170351335,0.755880375834584,-0.27217132573233976,0.5709474833873287],[1,100.00000762939453,100,100],[1,37.26104232070713,106.93632360598255,-3.1637061230974357]],[31,"Camera",-6,[0,"6e0hcAGCxfAr6M1xLEdv+M",-5,0],[1,7.358891487121582,4.958309173583984,6.925790786743164],[3,-0.2125573428631872,0.9047969461974903,-0.08438929060572481,0.359221811389147],[1,100,100.00000762939453,99.99999237060547],[1,-0.000007844523443071537,136.6919366527446,-26.44070525904853]],-7,-8,-9,-10],4,4,1,1,1,1],[[96,-2,[1,"ec5ORga35Va45IXsK/PBUm"],[10],11]],[0,"02pgz8C41aYqTZE2JW/1U6",-1,0]],[20,"mixamorig:LeftHand",[-11,-12,-13,-14],[0,"10htsTokhc6qb2QLyL29+X",1,0],[1,2.9563904035967425e-7,0.48702824115753174,3.337860050578456e-7],[3,-0.06458624640142242,0.14179774041000062,0.10630967032069179,0.9820490168961521],[1,-9.202892417933546,17.31877080266899,10.981162361506751]],[20,"mixamorig:RightHand",[-15,-16,-17,-18],[0,"15dzN4U8lStJKuJqpIMYvc",1,0],[1,1.23977656585339e-7,0.4870173931121826,-7.629394360719743e-8],[3,0.022819365676191382,-0.22534289334086569,0.14205728079163302,0.9635972114659687],[1,6.428128505825183,-27.187815272480698,15.277107204640442]],[20,"mixamorig:Hips",[-19,-20,-21],[0,"c01hrnkOFYVKQFBdePoyXh",1,0],[1,-0.19107671082019806,1.3081908226013184,-0.04554314538836479],[3,-0.0911375148608285,0.1861919341096083,-0.008710968436467107,0.9782385374163165],[1,-10.095684917362481,21.294679299199277,-2.922260078713492]],[20,"mixamorig:Spine2",[-22,-23,-24],[0,"85znL2Qz9Tn5YQQcNy7ELp",1,0],[1,2.5033950024067053e-8,0.42710259556770325,1.8402934287564676e-8],[3,0.01656328843754071,-0.02850207984970503,0.03206348708491365,0.9989420512303662],[1,2.005133686512898,-3.332016545751756,3.618625714440805]],[52,"Armature",1,[4],[0,"90KRbm8ixScL8DZQJMp6ZX",1,0]],[6,"mixamorig:Spine",4,[-25],[0,"09gObejBhT1pDGAwxlVBtf",1,0],[1,-9.53674295089968e-9,0.32023850083351135,-0.0075194742530584335],[3,0.1388516558917183,-0.19416430366270673,-0.13161592032120784,0.9621318466599603],[1,13.123751288306607,-20.744334723693516,-17.889595321567302]],[6,"mixamorig:Spine1",7,[5],[0,"311AJddHVar4fzijRCKTK3",1,0],[1,3.278255444882916e-9,0.3737143576145172,-3.278255444882916e-9],[3,0.014351540783552443,-0.029807706478809894,0.03194237040455111,0.9989420498129757],[1,1.7556890580171827,-3.473644429887851,3.6098205263367635]],[6,"mixamorig:Neck",5,[-26],[0,"19QEXunMFTnYbdXqEi1mXd",1,0],[1,1.0430812658057675e-8,0.4804900288581848,1.4305114426349519e-8],[3,-0.03208178236546389,-0.07736726741177698,-0.023344199775304667,0.9962128856375729],[1,-3.8756388320534527,-8.962088468906249,-2.381177530471346]],[6,"mixamorig:Head",9,[-27],[0,"ab5aadvy1VypqDwIxDBg9S",1,0],[1,-6.794929419129403e-8,0.40414124727249146,0.039747461676597595],[3,-0.04271322810172046,-0.4109752427008117,0.19499456649004215,0.8895234955140306],[1,5.232889502646775,-50.635114087095566,22.458407003811796]],[11,"mixamorig:HeadTop_End",10,[[8,"mixamorig:HeadTop_End_end",-28,[0,"d4sCH/9/lTdYaC38YGe5WH",1,0],[1,0,1.367783784866333,7.105427198782324e-17]]],[0,"67x0mlxidVBIwqhCLFvkHW",1,0],[1,1.162290619305395e-8,1.3612160682678223,0.1338762491941452]],[6,"mixamorig:LeftShoulder",5,[-29],[0,"1fHezMxi1REYr4CR3FKJHE",1,0],[1,0.19215570390224457,0.40112972259521484,-0.0036019866820424795],[3,0.6566884405065722,0.3523062705187488,-0.5162375480823065,0.4220656084167306],[1,113.30498468567058,77.3592317439222,1.543659474629591]],[6,"mixamorig:LeftArm",12,[-30],[0,"43BhEr9zBeZY8gm2qqNjL1",1,0],[1,4.7683716530855236e-8,0.43272823095321655,4.0531158873591266e-8],[3,0.18991454427120133,-0.07020730703249216,0.5932920129510609,0.7791071731680986],[1,59.44529991837276,-49.4753080616761,63.87159342310299]],[6,"mixamorig:LeftForeArm",13,[2],[0,"7bqfi3SadfrqakQjqeKrr5",1,0],[1,9.059905892172537e-8,0.3731558918952942,5.7220457705398076e-8],[3,0.006131262488366083,-0.0014134811866556092,0.28339314321631764,0.958983178199289],[1,0.8574049106561131,-0.422258726189375,32.923664170854494]],[6,"mixamorig:LeftHandThumb1",2,[-31],[0,"98ud85RKZfWbVnHVZ2n7/U",1,0],[1,-0.04896849766373634,0.030944842845201492,-0.0008550739148631692],[3,0.06618604925929436,0.13182656699764794,-0.0719351259656654,0.9864413316408456],[1,8.668380111124742,15.766258363802743,-7.150115549629618]],[6,"mixamorig:LeftHandThumb2",15,[-32],[0,"116ERZkOJd6rH1cKjC3nBj",1,0],[1,-0.017314953729510307,0.042990632355213165,-3.2901763802328787e-7],[3,0.020156840415815568,-0.011848886822596811,0.146975983243761,0.9888636741305883],[1,2.596218785995442,-1.7580684615171875,16.869974973717703]],[6,"mixamorig:LeftHandThumb3",16,[-33],[0,"b6bFGu6HJakrofDYZPtbyl",1,0],[1,0.00745112169533968,0.04626332223415375,2.0503998143794888e-7],[3,-0.01322256422599456,0.008790409334832109,-0.027273504505269996,0.9995019001737899],[1,-1.489368319968008,0.9669766445385048,-3.13864537452449]],[11,"mixamorig:LeftHandThumb4",17,[[8,"mixamorig:LeftHandThumb4_end",-34,[0,"f6Xzp6PeNRkKCHCQBZvfNb",1,0],[1,1.4210854397564648e-16,0.04106840118765831,2.8421708795129297e-16]]],[0,"8cjwix1stWgLsU8jRXcebX",1,0],[1,0.009863784536719322,0.03986614570021629,2.4676322141203855e-7]],[6,"mixamorig:LeftHandIndex1",2,[-35],[0,"e6ahZvnShS7ZhFof7zmRRI",1,0],[1,-0.04545113444328308,0.05934550613164902,0.00416270736604929],[3,0.03157891306328869,-0.015474330502678959,-0.00788506858816016,0.9993503605035599],[1,3.605227266837959,-1.744055764931067,-0.9590166939699402]],[6,"mixamorig:LeftHandIndex2",19,[-36],[0,"1cCBzX6+FQqYGqrRp4arJv",1,0],[1,-0.00007400989852612838,0.04516039043664932,2.813339108342916e-7],[3,0.1568639702243621,0.00004570506576479743,-0.031004622120005255,0.9871334287540326],[1,18.075847461623148,0.5635523389040729,-3.5085254747099333]],[6,"mixamorig:LeftHandIndex3",20,[-37],[0,"6cEpwe8XJSaqHm1sXOPyKo",1,0],[1,-0.000010774135262181517,0.04865387827157974,1.2159347306806012e-7],[3,0.18554738309911203,0.00007475242514062024,-0.03613361744695404,0.9819707351684893],[1,21.4278886463146,0.7786759829654807,-4.067782435943286]],[11,"mixamorig:LeftHandIndex4",21,[[8,"mixamorig:LeftHandIndex4_end",-38,[0,"43ncEUv4xfwbuYIpY6PLVq",1,0],[1,-1.4210854397564648e-16,0.03385232761502266,0]]],[0,"0bim3hho9XsZb+LE0vdWts",1,0],[1,0.00008439183147856966,0.033852189779281616,-1.9684433993916173e-7]],[6,"mixamorig:LeftHandMiddle1",2,[-39],[0,"d5w5fk0wxQRqsrl/f4wDF5",1,0],[1,0.00035771369584836066,0.07962868362665176,0.0009874344104900956],[3,0.03356328522914357,-0.008854252065471628,-0.007098958184878999,0.9993721593569023],[1,3.8397445028912975,-0.9868390694702175,-0.8470548711704488]],[6,"mixamorig:LeftHandMiddle2",23,[-40],[0,"35RP6wsZhQkp95YAkFssfA",1,0],[1,0.000007696151442360133,0.037841301411390305,-5.7220457705398076e-8],[3,0.15415147175428592,-0.000007122402727048163,-0.029137311935236644,0.9876175073166977],[1,17.757595081759046,0.5147489467832996,-3.2994953997167062]],[6,"mixamorig:LeftHandMiddle3",24,[-41],[0,"54IFjDSqdWYp4JEEHgMB5Q",1,0],[1,-0.0000023913382847240428,0.03802811726927757,-6.19888282926695e-8],[3,0.1954359229198429,0.000013060115407194077,-0.03684401075550981,0.9800241419135298],[1,22.585859286845977,0.8287921051256064,-4.140985960088005]],[11,"mixamorig:LeftHandMiddle4",25,[[8,"mixamorig:LeftHandMiddle4_end",-42,[0,"a52keYCZ5a3oMoGsNi271C",1,0],[1,0,0.02641472965478897,0]]],[0,"69xWxL4C1RbZH/9BV4LDug",1,0],[1,-0.000005648136266245274,0.02641494758427143,2.6911496320281003e-7]],[6,"mixamorig:LeftHandRing1",2,[-43],[0,"0c6CoTwoFfg5FzH0NwV5W5",1,0],[1,0.045093558728694916,0.09176016598939896,0.000415210728533566],[3,0.06976936823453743,0.00025368185254968814,-0.013517992698658284,0.9974715207839622],[1,8.00406067712884,0.13712225736424793,-1.5432895492985623]],[6,"mixamorig:LeftHandRing2",27,[-44],[0,"05hzFunZlR4LF6yEYWSqQQ",1,0],[1,-0.000028262138584977947,0.02848130278289318,-4.0531159584134e-7],[3,0.17380863491071435,0.00012108110284517648,-0.029072525085014785,0.984350208033209],[1,20.044214886265873,0.5936776593512887,-3.27870677489513]],[6,"mixamorig:LeftHandRing3",28,[-45],[0,"2fRobVg+xXYKeTddW/ISPw",1,0],[1,-0.000006742477580701234,0.028118258342146873,2.3841858265427618e-8],[3,0.2121922175450651,-0.0002638914095381835,-0.034793614532649605,0.9766083132773268],[1,24.544669631875994,0.8184156967163667,-3.903225616138814]],[11,"mixamorig:LeftHandRing4",29,[[8,"mixamorig:LeftHandRing4_end",-46,[0,"10m475KqRbQLS6Cj6eXSvG",1,0],[1,-2.8421708795129297e-16,0.016593974083662033,0]]],[0,"77SpgqvMNfWrcikXPFKdPO",1,0],[1,0.00003510951864882372,0.016593871638178825,5.9306621835730766e-8]],[6,"mixamorig:RightShoulder",5,[-47],[0,"aapgp0g8VXOJhtcEf5bQz6",1,0],[1,-0.19215568900108337,0.401048481464386,-0.00012675761536229402],[3,0.5526903800149041,-0.43985828219510636,0.5583373239918845,0.43510627214616454],[1,103.55710974783419,-90.59770621226174,-0.019408315077240747]],[6,"mixamorig:RightArm",31,[-48],[0,"f1OK8h0GFUsJDuZ8IEYUpw",1,0],[1,-9.53674295089968e-9,0.4327283501625061,-3.00407407394232e-7],[3,-0.0601361463932101,0.21366008956211183,-0.056371785278280684,0.9734244869787406],[1,-5.385251881976593,24.392782143796737,-7.7843378940647145]],[6,"mixamorig:RightForeArm",32,[3],[0,"28K9YEc5teybmGK3HoR6v5",1,0],[1,4.2915345943583816e-8,0.37371811270713806,5.388259864957945e-7],[3,0.0009410028704564912,0.002885860429557174,-0.11043641118883372,0.993878556669229],[1,0.1472842620796676,0.3490962775410454,-12.680567639028409]],[6,"mixamorig:RightHandThumb1",3,[-49],[0,"603foHjgFaQIr1WRjcYkyC",1,0],[1,0.0455387681722641,0.03160794824361801,0.0024692427832633257],[3,0.13761548860870834,-0.11230070276890379,0.10471513991350034,0.9785117622826478],[1,17.299903969629053,-14.622410598674135,10.021712348277298]],[6,"mixamorig:RightHandThumb2",34,[-50],[0,"25jQSmEspXvZO/sIrF279P",1,0],[1,0.01774524711072445,0.04068950191140175,9.53674295089968e-9],[3,0.032024123121975195,0.015277770513615294,-0.05818603623444431,0.9976750124432936],[1,3.790981052271546,1.9736682801529302,-6.610719227996499]],[6,"mixamorig:RightHandThumb3",35,[-51],[0,"c4ytFEIblS+Kh1XzrhqhwV",1,0],[1,-0.0003397274122107774,0.04961962625384331,1.1801719779214181e-7],[3,-0.01638475804755026,0.008017192590958984,-0.1342439501850057,0.9907804126875988],[1,-1.8022681223655561,0.6828506637576373,-15.442743457150934]],[11,"mixamorig:RightHandThumb4",36,[[8,"mixamorig:RightHandThumb4_end",-52,[0,"0aN2vmpyZYvJolOHdClzqN",1,0],[1,0,0.04176119714975357,0]]],[0,"bf0g2MgX1R7pPHFV8JOBRn",1,0],[1,-0.017405526712536812,0.03796101361513138,-1.6927718604620168e-7]],[6,"mixamorig:RightHandIndex1",3,[-53],[0,"18YFcsyblUhbjjrYT072Yb",1,0],[1,0.045461587607860565,0.05975166708230972,-0.001818015007302165],[3,0.09850554421926806,-0.007229594234311889,0.018044524359526203,0.9949466246316488],[1,11.326123153034164,-1.028615791273025,1.976085833011146]],[6,"mixamorig:RightHandIndex2",38,[-54],[0,"d8IRPyoSlfwq4/1s2wZuoz",1,0],[1,0.000008339881787833292,0.04922885075211525,-7.218122277663497e-7],[3,0.12495620832645678,-0.00004766123055624548,0.012381091995223605,0.992085002552749],[1,14.359804131623443,-0.18275770697286803,1.4069980333780276]],[6,"mixamorig:RightHandIndex3",39,[-55],[0,"dciKM8AgBcMYzst+fXul+j",1,0],[1,0.000022602082026423886,0.04495186731219292,-4.6715140200603855e-8],[3,0.1388916852503128,0.00006563209324103852,0.012789979873723469,0.9902249804340356],[1,15.97123737661615,-0.19617900183608702,1.4524973947057598]],[11,"mixamorig:RightHandIndex4",40,[[8,"mixamorig:RightHandIndex4_end",-56,[0,"4df9ZKbJRcDIzXwmLqg6Ma",1,0],[1,0,0.029024703428149223,0]]],[0,"6eTbF/l4tVi6ZahK3H4Eaj",1,0],[1,-0.00003095626743743196,0.029024638235569,4.631280887679168e-7]],[6,"mixamorig:RightHandMiddle1",3,[-57],[0,"547KoZqpBRVIlwINlx8znB",1,0],[1,-0.001207752269692719,0.07784294337034225,0.00023451686138287187],[3,0.09565111740250387,-0.0016945207739158428,0.017999076736900543,0.9952507350289264],[1,10.98633272961229,-0.3907894416456159,2.0346009597232246]],[6,"mixamorig:RightHandMiddle2",42,[-58],[0,"c8mg1TbMBfcaRAzCeBdNaC",1,0],[1,-0.00001583099401614163,0.03852804750204086,-6.681680702058657e-7],[3,0.1343764803693362,-0.000012966304815998842,0.015179349018473832,0.9908140838314723],[1,15.450462739517008,-0.2353171435621893,1.723507303982298]],[6,"mixamorig:RightHandMiddle3",43,[-59],[0,"65UW/kHSlZhKjPKFa55MS5",1,0],[1,0.000025544166419422254,0.03849944472312927,-1.3470649662394862e-7],[3,0.15318181924304264,-0.00002999796706577993,0.01617055552883481,0.9880657075758689],[1,17.629640400409176,-0.2873916948471935,1.830679722051292]],[11,"mixamorig:RightHandMiddle4",44,[[8,"mixamorig:RightHandMiddle4_end",-60,[0,"6bFfwEApJfFqqW/gMlWG4s",1,0],[1,1.776356799695581e-17,0.027018681168556213,0]]],[0,"80wK+5SbZV2p0k1WLTeLKw",1,0],[1,-0.00000975608782027848,0.02701861783862114,-2.574920756615029e-7]],[6,"mixamorig:RightHandRing1",3,[-61],[0,"1e0SVoWRZSJ4UZs5o1yRwS",1,0],[1,-0.0442538745701313,0.09698587656021118,-0.0014171445509418845],[3,0.11504377718825105,-0.010943749267986906,0.016855571849911474,0.9931571141465141],[1,13.237722559319838,-1.4685524792005544,1.7743008047628108]],[6,"mixamorig:RightHandRing2",46,[-62],[0,"b4A/KKdN9XBJpoXvo8WuNE",1,0],[1,-0.00011236190766794607,0.02362866885960102,-3.576278473360617e-8],[3,0.15733410841920106,0.0005041730609582669,0.016760601182337655,0.9874030617663014],[1,18.111030965198808,-0.24526980011188113,1.9058707092231366]],[6,"mixamorig:RightHandRing3",47,[-63],[0,"26izo6oghQdbhEQCrvLg6M",1,0],[1,0.000019359587895451114,0.027629965916275978,1.6406178815486783e-7],[3,0.1767741837901591,-0.0006529076884778925,0.0182400042531228,0.984082193671707],[1,20.375181499604846,-0.4433979962840692,2.044087658311796]],[11,"mixamorig:RightHandRing4",48,[[8,"mixamorig:RightHandRing4_end",-64,[0,"7cf6e/2khR+qv6AcCXuJol",1,0],[1,3.552713599391162e-17,0.016685115173459053,0]]],[0,"fboOo2uKZfeavDgTv3K7m9",1,0],[1,0.0000929641755647026,0.016684575006365776,-1.2636184010261786e-7]],[23,"mixamorig:LeftUpLeg",4,[-65],[0,"36RYIMce1fJZKiSUazngtx",1,0],[1,0.34745246171951294,-0.1779574453830719,-0.016596898436546326],[3,0.19379138920836345,0.13455112260619895,0.9499741780082116,-0.2046703544525362],[1,0.9999785423278809,0.9998226165771484,0.9991481900215149],[1,-159.16122519083615,-153.28713383211348,-19.676762978337024]],[6,"mixamorig:LeftLeg",50,[-66],[0,"83n2CfEkJRVrWZKacLlX22",1,0],[1,4.76837147544984e-9,0.7595217823982239,7.1525572131747595e-9],[3,-0.42817267155825733,0.07830560094032406,-0.12426251738227817,0.8916811217951507],[1,-51.00592652687839,1.9893269986858522,-16.77785201661488]],[6,"mixamorig:LeftFoot",51,[-67],[0,"a0TdA3vQ1efoiXGSybsFmL",1,0],[1,8.225440950582197e-8,0.3845048248767853,-2.3841858265427618e-8],[3,0.658988476258406,-0.06262338910886954,-0.05809501935116365,0.7472867374855058],[1,82.72993010263319,-0.9899454769745315,-9.750811260468824]],[6,"mixamorig:LeftToeBase",52,[-68],[0,"dfaZhYEGxaPbmBLLFSVmjF",1,0],[1,7.212162245195941e-8,0.15753009915351868,-1.0132789718397817e-8],[3,0.28984808218654196,0.010482543825120661,-0.0032938741279760144,0.9570095902972795],[1,33.69996088781148,1.2590750580722556,-0.013054718061142355]],[33,"mixamorig:LeftToe_End",53,[[8,"mixamorig:LeftToe_End_end",-69,[0,"01V5dCNhlUdJ/VY0jNnuQL",1,0],[1,0,0.09705689549446106,-8.881783998477905e-18]]],[0,"dfYYauguFR4JB8LpICxGE2",1,0],[1,3.695488004495928e-8,0.09712968021631241,-5.066394859198908e-9],[3,-1.8626455933071127e-9,0.00000374391697730166,-1.0360964530703005e-8,0.9999999999929916],[1,-2.1343901737448252e-7,0.000429021283292314,-0.0000011872798776943337]],[23,"mixamorig:RightUpLeg",4,[-70],[0,"35qa244v9TIpAXdeQcBZbo",1,0],[1,-0.34745246171951294,-0.1779574155807495,-0.012596082873642445],[3,-0.0682902121706476,-0.10701161020592698,0.9910397065664143,0.04153627585109424],[1,1.000046968460083,1.0000120401382446,1.0004956722259521],[1,168.029420655131,172.69995466717543,5.563212925632691]],[6,"mixamorig:RightLeg",55,[-71],[0,"6apQ8B70xVXqy+ySko/3hv",1,0],[1,6.19888282926695e-8,0.7596012353897095,-1.907348590179936e-8],[3,-0.3290251188381362,0.08500701915886365,0.01714752610824265,0.9403309205889394],[1,-38.45317458786746,9.857680587869623,-1.3574749631845835]],[6,"mixamorig:RightFoot",56,[-72],[0,"686T1w3qVc3LVicMLz8o0S",1,0],[1,4.76837147544984e-9,0.38444751501083374,-4.76837147544984e-9],[3,0.7186983361884653,0.24485625783691087,0.025487317248097302,0.6502834083824767],[1,92.13331846640229,17.780340312836532,22.65016763689343]],[6,"mixamorig:RightToeBase",57,[-73],[0,"54J/UVdaJUp6IQlxbH347W",1,0],[1,1.0726973442842791e-7,0.15600083768367767,-3.039836826701503e-8],[3,0.28662612690384454,-0.01447058731093566,0.0042723123402946366,0.9579236988540604],[1,33.31595683090647,-1.7290221796935685,-0.0063138981176278555]],[33,"mixamorig:RightToe_End",58,[[8,"mixamorig:RightToe_End_end",-74,[0,"d9GNngnkNYm4yAEr8Lk7vy",1,0],[1,1.4210854397564648e-16,0.10192184150218964,2.2204459996194763e-18]]],[0,"9afCebUkhRSbizpOAaEp5L",1,0],[1,8.910894422342608e-8,0.10187285393476486,4.3213366218708416e-9],[3,3.0267990780408995e-8,0.0000011890662108263088,-6.17001250091239e-9,0.9999999999992926],[1,0.0000034684570928212837,0.00013625695090535336,-7.070272274658425e-7]],[10,"righteye",1,[[28,-75,[1,"70Pu5QETJYgLEiWCHe8OEW"],[0],[3],1,1,2]],[0,"e4EsCNbu5aC7clkgQ3bBsV",1,0],[1,-0.34165191650390625,4.110549449920654,0.3241972029209137],[3,0.996711351970507,0.0002947997355059248,-0.003629680179509719,0.08095195715999973],[1,23.61874771118164,23.618749618530273,23.618751525878906],[1,170.71336558892713,0.4173012336898772,6.056627844929361e-8]],[10,"lefteye",1,[[28,-76,[1,"fcAR/uq1FX5qR96dKj+9J8"],[3],[3],1,4,5]],[0,"ecWsZqQQtXxpzw8BEVGb2N",1,0],[1,0.3416520655155182,4.1105499267578125,0.3241972029209137],[3,0.996711351970507,0.0002947997355059248,-0.003629680179509719,0.08095195715999973],[1,23.61874771118164,23.618749618530273,23.618751525878906],[1,170.71336558892713,0.4173012336898772,6.056627844929361e-8]],[10,"body.001",1,[[28,-77,[1,"a3gyuxPutWZaEi0HF4ZC5B"],[6,7],[3],1,8,9]],[0,"efxTu9k9lVR6TdI+jGB9uS",1,0],[1,1.2516975012033527e-8,2.5327258110046387,4.12633482937963e-7],[3,-0.7071068407911908,7.336142374789546e-10,2.206666664967964e-9,0.7071067215818992],[1,56.553260803222656,56.553260803222656,56.55325698852539],[1,-90.00000965934633,2.3824646841145515e-7,1.1935916206941134e-7]]],0,[0,6,1,0,0,1,0,6,1,0,2,1,0,6,1,0,2,1,0,-3,6,0,-4,60,0,-5,61,0,-6,62,0,-1,15,0,-2,19,0,-3,23,0,-4,27,0,-1,34,0,-2,38,0,-3,42,0,-4,46,0,-1,7,0,-2,50,0,-3,55,0,-1,9,0,-2,12,0,-3,31,0,-1,8,0,-1,10,0,-1,11,0,2,11,0,-1,13,0,-1,14,0,-1,16,0,-1,17,0,-1,18,0,2,18,0,-1,20,0,-1,21,0,-1,22,0,2,22,0,-1,24,0,-1,25,0,-1,26,0,2,26,0,-1,28,0,-1,29,0,-1,30,0,2,30,0,-1,32,0,-1,33,0,-1,35,0,-1,36,0,-1,37,0,2,37,0,-1,39,0,-1,40,0,-1,41,0,2,41,0,-1,43,0,-1,44,0,-1,45,0,2,45,0,-1,47,0,-1,48,0,-1,49,0,2,49,0,-1,51,0,-1,52,0,-1,53,0,-1,54,0,2,54,0,-1,56,0,-1,57,0,-1,58,0,-1,59,0,2,59,0,0,60,0,0,61,0,0,62,0,10,1,2,2,14,3,2,33,4,2,6,5,2,8,77],[0,0,0,0,0,0,0,0,0,0,0,0],[-1,1,11,-1,1,11,-1,-2,1,11,-1,9],[33,34,35,36,37,38,14,14,39,40,15,15]],[[[27,"Skin-1",929976066,["Armature/mixamorig:Hips","Armature/mixamorig:Hips/mixamorig:Spine","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head/mixamorig:HeadTop_End","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2/mixamorig:LeftHandThumb3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2/mixamorig:LeftHandThumb3/mixamorig:LeftHandThumb4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2/mixamorig:LeftHandIndex3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2/mixamorig:LeftHandIndex3/mixamorig:LeftHandIndex4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2/mixamorig:LeftHandMiddle3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2/mixamorig:LeftHandMiddle3/mixamorig:LeftHandMiddle4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2/mixamorig:LeftHandRing3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2/mixamorig:LeftHandRing3/mixamorig:LeftHandRing4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2/mixamorig:RightHandThumb3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2/mixamorig:RightHandThumb3/mixamorig:RightHandThumb4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3/mixamorig:RightHandIndex4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2/mixamorig:RightHandMiddle3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2/mixamorig:RightHandMiddle3/mixamorig:RightHandMiddle4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2/mixamorig:RightHandRing3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2/mixamorig:RightHandRing3/mixamorig:RightHandRing4","Armature/mixamorig:Hips/mixamorig:LeftUpLeg","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase/mixamorig:LeftToe_End","Armature/mixamorig:Hips/mixamorig:RightUpLeg","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase/mixamorig:RightToe_End"],[[[7,23.618122100830078,-1.1541878564003127e-9,-0.17202045023441315,0,0.027759602293372154,-23.309186935424805,3.811347484588623,0,-0.16976585984230042,-3.811448812484741,-23.308570861816406,0,0.3416520655155182,2.690119981765747,0.3903913199901581,1],[7,23.618122100830078,0.004038060549646616,-0.1719730645418167,0,0.027759604156017303,-23.39223289489746,3.2631304264068604,0,-0.16976585984230042,-3.2632462978363037,-23.391618728637695,0,0.3416520655155182,2.3598878383636475,0.45343247056007385,1],[7,23.618122100830078,0.004038061946630478,-0.1719730645418167,0,0.027759604156017303,-23.39223289489746,3.2631301879882812,0,-0.16976585984230042,-3.2632460594177246,-23.391618728637695,0,0.3416520655155182,1.9861732721328735,0.45343247056007385,1],[7,23.618122100830078,0.004038053099066019,-0.1719730645418167,0,0.027759604156017303,-23.39223289489746,3.2631313800811768,0,-0.16976585984230042,-3.26324725151062,-23.391618728637695,0,0.3416520655155182,1.5590709447860718,0.4534323811531067,1],[7,23.618122100830078,-9.143226176178132e-10,-0.17202045023441315,0,0.027759602293372154,-23.309188842773438,3.811347484588623,0,-0.16976585984230042,-3.8114495277404785,-23.308570861816406,0,0.3416520655155182,1.0889277458190918,0.4279884994029999,1],[7,23.618122100830078,-1.1541911870693866e-9,-0.17202045023441315,0,0.027759602293372154,-23.309188842773438,3.811347484588623,0,-0.16976585984230042,-3.8114495277404785,-23.308570861816406,0,0.3416520655155182,0.6847870349884033,0.3882410526275635,1],[7,23.618122100830078,-1.1541911870693866e-9,-0.17202045023441315,0,0.027759602293372154,-23.309188842773438,3.811347484588623,0,-0.16976585984230042,-3.8114495277404785,-23.308570861816406,0,0.3416520655155182,-0.676429033279419,0.2543647289276123,1],[7,-0.25671201944351196,21.929731369018555,-8.767338752746582,0,-3.256455898284912,8.65124225616455,21.73469352722168,0,23.391775131225586,1.4450386762619019,2.929550886154175,0,-0.4600011706352234,-0.2985292971134186,-1.1275349855422974,1],[7,-0.7556779384613037,23.235227584838867,-4.171137809753418,0,-3.452483892440796,4.019622325897217,23.016693115234375,0,23.352832794189453,1.3461339473724365,3.2678158283233643,0,-0.4432413578033447,-0.499135285615921,-1.2538259029388428,1],[7,-0.002215934917330742,23.618566513061523,0.09163009375333786,0,-3.3203883171081543,-0.09103161096572876,23.384016036987305,0,23.384193420410156,-0.010687693022191525,3.3203718662261963,0,-0.47128018736839294,-0.617180585861206,-1.3879547119140625,1],[7,-7.496315002441406,22.391944885253906,-0.5012226104736328,0,-4.526247978210449,-0.9968798160552979,23.159547805786133,0,21.935447692871094,7.446621417999268,4.607544898986816,0,-0.012112106196582317,-1.2053585052490234,-1.383752465248108,1],[7,7.006463527679443,22.555139541625977,-0.1424739956855774,0,-4.255195140838623,1.4682788848876953,23.185832977294922,0,22.15058135986328,-6.852370738983154,4.499137878417969,0,-0.6927509307861328,-1.002519965171814,-1.3990206718444824,1],[7,7.006451606750488,22.548547744750977,0.563781201839447,0,-4.255187034606934,0.7416220903396606,23.220439910888672,0,22.150588989257812,-6.98986291885376,4.282379150390625,0,-0.6754361391067505,-1.0011956691741943,-1.4310685396194458,1],[7,7.006464004516602,22.111000061035156,-4.456221103668213,0,-4.255196571350098,5.878216743469238,22.476322174072266,0,22.150575637817383,-5.864724159240723,5.727325916290283,0,-0.6828872561454773,-1.3390263319015503,-1.162813425064087,1],[7,7.006465435028076,22.111007690429688,-4.456218719482422,0,-4.255198001861572,5.878215789794922,22.476327896118164,0,22.15058135986328,-5.864726543426514,5.727325439453125,0,-0.6927511692047119,-1.3788928985595703,-1.1628139019012451,1],[7,-0.4868646264076233,23.182592391967773,4.491724491119385,0,-4.61774206161499,-4.499407768249512,22.72173500061035,0,23.157827377319336,-0.40981054306030273,4.625216960906982,0,-0.3448542654514313,-0.8969610333442688,-1.6135157346725464,1],[7,-0.486863374710083,23.60556411743164,-0.620587170124054,0,-4.617743968963623,0.5135599374771118,23.157245635986328,0,23.157827377319336,0.598682165145874,4.604581832885742,0,-0.34478050470352173,-1.2683329582214355,-1.371990442276001,1],[7,-0.48686495423316956,20.39238929748535,-11.906244277954102,0,-4.617741107940674,11.596633911132812,20.050931930541992,0,23.157827377319336,2.7411296367645264,3.7479031085968018,0,-0.34476998448371887,-1.8147765398025513,-0.5686795711517334,1],[7,-0.48686483502388,20.39238739013672,-11.906246185302734,0,-4.617741107940674,11.596634864807129,20.050931930541992,0,23.157827377319336,2.7411296367645264,3.7479031085968018,0,-0.3448544144630432,-1.848628282546997,-0.5686792731285095,1],[7,0.5222717523574829,23.51591682434082,2.1387131214141846,0,-4.596584320068359,-1.997063159942627,23.080913543701172,0,23.16126251220703,-0.9266064167022705,4.532413005828857,0,-0.4465167820453644,-1.0427721738815308,-1.5106621980667114,1],[7,0.5222738981246948,23.594663619995117,-0.9297369122505188,0,-4.59658670425415,1.0137628316879272,23.14495849609375,0,23.161264419555664,-0.3308553397655487,4.614316940307617,0,-0.44652464985847473,-1.2674400806427002,-1.3577263355255127,1],[7,0.5222761034965515,23.062713623046875,-5.067901611328125,0,-4.596590995788574,5.07146692276001,22.605243682861328,0,23.1612606048584,0.4864310324192047,4.600522994995117,0,-0.4465221166610718,-1.5240509510040283,-1.1067689657211304,1],[7,0.5222761034965515,23.062715530395508,-5.067902088165283,0,-4.596590995788574,5.071467876434326,22.605241775512695,0,23.1612606048584,0.48643121123313904,4.600523471832275,0,-0.4465166926383972,-1.5504659414291382,-1.1067692041397095,1],[7,-3.1026651859283447,23.411361694335938,-0.3562075197696686,0,-4.633224964141846,-0.2616744041442871,23.158370971679688,0,22.951086044311523,3.112062931060791,4.626917362213135,0,-0.3027576804161072,-1.2539889812469482,-1.3919625282287598,1],[7,-3.102674961090088,23.40253448486328,0.7346854209899902,0,-4.633227348327637,-1.3401141166687012,23.121044158935547,0,22.95108413696289,2.893171548843384,4.7668585777282715,0,-0.30272871255874634,-1.2162401676177979,-1.4501885175704956,1],[7,-3.1026856899261475,23.04944610595703,4.115993499755859,0,-4.633212089538574,-4.674274444580078,22.683252334594727,0,22.951082229614258,2.1723721027374268,5.135573387145996,0,-0.30272218585014343,-1.0212318897247314,-1.6151050329208374,1],[7,-3.1026856899261475,23.049449920654297,4.11599063873291,0,-4.633212089538574,-4.674272060394287,22.68325424194336,0,22.951082229614258,2.172372817993164,5.135573387145996,0,-0.30275729298591614,-1.0378261804580688,-1.6151044368743896,1],[7,-0.18913359940052032,-21.929683685302734,8.769186973571777,0,3.2638602256774902,8.66105842590332,21.72967529296875,0,-23.391386032104492,1.385814905166626,2.9610939025878906,0,0.45313405990600586,-0.9260751605033875,-0.876776397228241,1],[7,-1.732446312904358,-23.182828903198242,4.171377658843994,0,3.8654704093933105,3.8461358547210693,22.980661392211914,0,-23.235795974731445,2.368335247039795,3.512012243270874,0,0.3563545346260071,-1.181578278541565,-1.1389905214309692,1],[7,-0.2511483132839203,-23.617231369018555,-0.0935087651014328,0,3.6124393939971924,-0.1308281570672989,23.340490341186523,0,-23.339509963989258,0.23388753831386566,3.613598585128784,0,0.4547712206840515,-1.2986829280853271,-1.3963664770126343,1],[7,-7.768221378326416,-22.292673110961914,-0.7327355146408081,0,3.0744667053222656,-1.8386855125427246,23.345504760742188,0,-22.09180450439453,7.582969665527344,3.506596565246582,0,-0.120081327855587,-1.8032969236373901,-1.4419035911560059,1],[7,5.084039688110352,-23.06182289123535,0.3874869644641876,0,3.581982374191284,1.1814091205596924,23.315645217895508,0,-22.785240173339844,-4.960029602050781,3.7518250942230225,0,0.8217902183532715,-1.7171155214309692,-1.3626055717468262,1],[7,5.0840229988098145,-23.064788818359375,0.11552336812019348,0,3.5819664001464844,0.9063911437988281,23.327953338623047,0,-22.785249710083008,-5.003908157348633,3.6930599212646484,0,0.8040447235107422,-1.7416152954101562,-1.3832380771636963,1],[7,5.084023475646973,-22.885311126708984,2.8741674423217773,0,3.5819668769836426,3.690838575363159,23.051965713500977,0,-22.785249710083008,-4.526130676269531,4.265203475952148,0,0.8043844699859619,-1.9438607692718506,-1.1589992046356201,1],[7,5.084025859832764,-22.885311126708984,2.8741655349731445,0,3.581969738006592,3.690838098526001,23.05196189880371,0,-22.785249710083008,-4.526132583618164,4.2652058601379395,0,0.8217899799346924,-1.9818214178085327,-1.158998966217041,1],[7,0.5025246143341064,-23.58266830444336,1.2044094800949097,0,3.5228939056396484,1.2660739421844482,23.320205688476562,0,-23.34913444519043,-0.316526859998703,3.5444509983062744,0,0.4952358305454254,-1.9156090021133423,-1.2873939275741577,1],[7,0.5025265216827393,-23.609737396240234,0.4161314070224762,0,3.5228943824768066,0.48652786016464233,23.349475860595703,0,-23.349136352539062,-0.4347284734249115,3.531902551651001,0,0.4952276945114136,-1.920746088027954,-1.352295994758606,1],[7,0.5025249719619751,-23.242725372314453,-4.167555809020996,0,3.5228896141052246,-4.048052787780762,23.00104522705078,0,-23.349138259887695,-1.1110001802444458,3.3806750774383545,0,0.495205283164978,-1.6663386821746826,-1.707627534866333,1],[7,0.5025249123573303,-23.24272918701172,-4.167555809020996,0,3.5228896141052246,-4.0480523109436035,23.001047134399414,0,-23.349138259887695,-1.1110002994537354,3.380676031112671,0,0.49523624777793884,-1.6953632831573486,-1.7076274156570435,1],[7,0.5298900604248047,-23.612030029296875,-0.19157250225543976,0,3.52364182472229,-0.11040437966585159,23.354171752929688,0,-23.348413467407227,-0.5525346398353577,3.5201640129089355,0,0.5473764538764954,-1.8362433910369873,-1.4004175662994385,1],[7,0.5298917293548584,-23.567354202270508,1.4643065929412842,0,3.523643970489502,1.5271965265274048,23.304445266723633,0,-23.348413467407227,-0.30438268184661865,3.5502419471740723,0,0.5473923087120056,-1.9683398008346558,-1.2655330896377563,1],[7,0.5298944711685181,-23.60655975341797,-0.5429506897926331,0,3.523650646209717,-0.4579530656337738,23.349939346313477,0,-23.348411560058594,-0.6048657298088074,3.511559247970581,0,0.5473666191101074,-1.8920830488204956,-1.4314322471618652,1],[7,0.5298944711685181,-23.60655975341797,-0.5429505109786987,0,3.523650646209717,-0.4579528272151947,23.34994125366211,0,-23.348411560058594,-0.6048656702041626,3.511559247970581,0,0.5473763346672058,-1.919101595878601,-1.431432843208313,1],[7,0.4092020094394684,-23.50867462158203,2.2405643463134766,0,3.520297050476074,2.2765862941741943,23.243717193603516,0,-23.351346969604492,-0.06875570863485336,3.543334484100342,0,0.585155189037323,-1.97627592086792,-1.2015621662139893,1],[7,0.4092020094394684,-23.520130157470703,-2.116960287094116,0,3.520299196243286,-2.032867431640625,23.266292572021484,0,-23.351350784301758,-0.7186217904090881,3.4703803062438965,0,0.5852676033973694,-1.745088815689087,-1.5485587120056152,1],[7,0.4091932475566864,-23.334152221679688,-3.6325294971466064,0,3.5202884674072266,-3.532210111618042,23.086284637451172,0,-23.35135269165039,-0.9413837194442749,3.416675567626953,0,0.5852481722831726,-1.6689374446868896,-1.6598846912384033,1],[7,0.409193217754364,-23.334157943725586,-3.6325294971466064,0,3.5202884674072266,-3.532209873199463,23.086286544799805,0,-23.35135269165039,-0.9413836598396301,3.4166760444641113,0,0.5851551294326782,-1.6856224536895752,-1.6598846912384033,1],[7,-23.625818252563477,0.20322857797145844,-0.1490444540977478,0,0.17445018887519836,23.261669158935547,4.090629577636719,0,0.18192757666110992,4.086459636688232,-23.277996063232422,0,-0.018312592059373856,-2.8726556301116943,0.37316781282424927,1],[7,-23.62601089477539,0.18191859126091003,-0.14527122676372528,0,0.15230105817317963,23.218494415283203,4.330116271972656,0,0.17610162496566772,4.3259663581848145,-23.234664916992188,0,-0.014779306016862392,-3.63584041595459,0.33571910858154297,1],[7,-23.576566696166992,1.4071805477142334,0.5776019096374512,0,0.45527467131614685,15.096199035644531,-18.169416427612305,0,-1.4510080814361572,-18.127792358398438,-15.086028099060059,0,0.00872866716235876,-1.669586181640625,3.673759698867798,1],[7,-23.583898544311523,1.1994216442108154,-0.7363758683204651,0,0.9222145676612854,3.8304519653320312,-23.288326263427734,0,-1.0627386569976807,-23.29315948486328,-3.8675756454467773,0,-0.0858464241027832,0.28378137946128845,4.091326713562012,1],[7,-23.583892822265625,1.199421763420105,-0.7365520596504211,0,0.9223887324333191,3.8304524421691895,-23.288318634033203,0,-1.0627096891403198,-23.29316520690918,-3.8675830364227295,0,-0.08596903830766678,0.18665190041065216,4.091320991516113,1],[7,-23.61509895324707,-0.19762106239795685,-0.16565555334091187,0,-0.22418485581874847,23.2326602935791,4.2451982498168945,0,0.12747405469417572,4.248470306396484,-23.22248077392578,0,-0.6644747853279114,-2.8808748722076416,0.34923410415649414,1],[7,-23.61533546447754,-0.17561990022659302,-0.15584315359592438,0,-0.20019809901714325,23.252779006958008,4.134923934936523,0,0.12272743880748749,4.137940883636475,-23.24244499206543,0,-0.6678504943847656,-3.6381328105926514,0.3667652904987335,1],[7,-23.54411506652832,-1.6873055696487427,-0.7722082734107971,0,-0.49618664383888245,15.187247276306152,-18.074817657470703,0,1.788547158241272,-17.998079299926758,-15.179611206054688,0,-0.6924320459365845,-1.736255407333374,3.6417689323425293,1],[7,-23.556640625,-1.445739507675171,0.8699644207954407,0,-1.0944105386734009,3.8215510845184326,-23.281496047973633,0,1.2848597764968872,-23.251123428344727,-3.8806381225585938,0,-0.5715094208717346,0.24673624336719513,4.115879535675049,1],[7,-23.5566463470459,-1.44573974609375,0.8699086904525757,0,-1.0943554639816284,3.821549892425537,-23.28150177001953,0,1.2848693132400513,-23.251123428344727,-3.880633592605591,0,-0.5715574622154236,0.14486362040042877,4.11588191986084,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[2,".bin",931777963,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":142848,"length":11520,"count":2880,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":142848,"count":1984,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,5]]},"minPosition",8,[1,-0.009999997913837433,-0.01000000350177288,-0.009999999776482582],"maxPosition",8,[1,0.010000002570450306,0.009999999776482582,0.009999999776482582]]],-1],0,0,[],[],[]],[[[95,"Particle2D"],[53,"Particle2D",33554432,[[60,-2,[1,"76UO5etpdGTYuliY4gBbo+"]],[97,"Node<ParticleSystem2D>",1,2,300,2,360,360,3.369999885559082,50,30.31999969482422,-47.369998931884766,-47.369998931884766,-142.11000061035156,1,0,190.7899932861328,-92.11000061035156,65.79000091552734,-671.0499877929688,65.79000091552734,100,true,200,-3,[1,"47snLeNHlFeJIFkhbqAR0g"],[0,7,7],[0,0.25,0.8600000143051147],[4,2740373706],[4,3333292005],[4,3591610797],[4,3170498923],0,1]],[0,"42loSy0mhLn6bS5A2HHKD8",-1,0],[1,-166.147,156.763,-1]]],0,[0,6,1,0,0,1,0,0,1,0,10,1,3],[0,0],[20,5],[41,16]],[[[98,"atom",".plist"],-1],0,0,[0],[21],[16]],[[[13,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{},{},{}],[[[{"roughness":0.27216553688049316,"metallic":0.4000000059604645},"albedoScale",8,[1,0.8000000715255737,0.25100070238113403,0.014339365065097809],"emissive",8,[4,4284542200]],{},{}],11,0,0]]],0,0,[0],[3],[1]],[[{"name":"p2","rect":{"x":0,"y":0,"width":193,"height":738},"offset":{"x":0,"y":0},"originalSize":{"width":193,"height":738},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[4],[42]],[[[15,"材质",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.4000000059604645,"roughness":0.18706713616847992},"mainTexture",6,0]],11]]],0,0,[0,0],[7,3],[43,1]],[[[13,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{},{},{}],[[[{"roughness":0.8069013357162476,"metallic":0.4000000059604645},"mainColor",8,[4,4291875027],"albedoScale",8,[1,0.8117650151252747,0.022047365084290504,0.012611974962055683],"emissive",8,[4,4284835312]],{},{}],11,0,0]]],0,0,[0],[3],[1]],[[{"name":"menu","rect":{"x":12,"y":14,"width":176,"height":213},"offset":{"x":0,"y":4.5},"originalSize":{"width":200,"height":250},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[4],[44]],[[[15,"duilian_di",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.27216553688049316},"albedoScale",8,[1,0.8000000715255737,0,0.07100041955709457]]],11]]],0,0,[0],[3],[1]],[[{"name":"menu_bg","rect":{"x":56,"y":31,"width":1088,"height":920},"offset":{"x":0,"y":9},"originalSize":{"width":1200,"height":1000},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[4],[45]],[[[13,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{},{},{}],[[[{"roughness":0.8069013357162476,"metallic":0.4000000059604645},"albedoScale",8,[1,0.17503662407398224,0.17503662407398224,0.17503662407398224]],{},{}],11,0,0]]],0,0,[0],[3],[1]],[[[2,".bin",1846438401,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4272,"length":900,"count":225,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4272,"count":89,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.014833450317383,-1.4950568675994873,0.1534372717142105],"maxPosition",8,[1,-0.561033308506012,-0.772849440574646,0.2531372606754303]]],-1],0,0,[],[],[]],[[[2,".bin",2009801737,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1632,"length":228,"count":57,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":41364,"length":6228,"count":1557,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1632,"count":34,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":1860,"length":39504,"count":823,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.198655605316162,-1.4731143712997437,0.5232554078102112],"maxPosition",8,[1,-1.1079192161560059,-0.7936117053031921,0.6556657552719116]]],-1],0,0,[],[],[]],[[[2,".bin",78860236,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.392563581466675,-0.8529859781265259,0.06330228596925735],"maxPosition",8,[1,-2.3925561904907227,-0.8526507616043091,0.06396374851465225]]],-1],0,0,[],[],[]],[[[2,".bin",2404824488,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":240,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":240,"count":5,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.09825852513313293,-0.8297510743141174,0.30884870886802673],"maxPosition",8,[1,-0.09825459122657776,-0.829357385635376,0.30884870886802673]]],-1],0,0,[],[],[]],[[[2,".bin",709346535,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5143734216690063,-0.8816298842430115,0.08694719523191452],"maxPosition",8,[1,-0.5104609727859497,-0.8814406394958496,0.08791864663362503]]],-1],0,0,[],[],[]],[[[2,".bin",3023152963,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":240,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":240,"count":5,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.9142677783966064,-0.8979178071022034,0.05545811355113983],"maxPosition",8,[1,-2.914067029953003,-0.8778349161148071,0.05545811355113983]]],-1],0,0,[],[],[]],[[[2,".bin",1274787136,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.009999999776482582,-0.009999999776482582,-0.00009999999747378752],"maxPosition",8,[1,0.009999999776482582,0.009999999776482582,0]]],-1],0,0,[],[],[]],[[[2,".bin",69469454,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1392,"length":120,"count":30,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1392,"count":29,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.7808675169944763,-1.4841197729110718,0.27308201789855957],"maxPosition",8,[1,-0.3308265805244446,-1.4605063199996948,0.29516682028770447]]],-1],0,0,[],[],[]],[[[2,".bin",777963650,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":106992,"length":15696,"count":3924,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":106992,"count":2229,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.057840347290039,-1.4620403051376343,0.2531372606754303],"maxPosition",8,[1,-0.561033308506012,-1.4374563694000244,0.5761058926582336]]],-1],0,0,[],[],[]],[[[2,".bin",1028780323,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.392563581466675,-1.4211814403533936,0.06330228596925735],"maxPosition",8,[1,-2.3925561904907227,-1.4208464622497559,0.06396374851465225]]],-1],0,0,[],[],[]],[[[2,".bin",731714919,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":96,"count":24,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.7808673977851868,-0.8195220232009888,0.2684362530708313],"maxPosition",8,[1,-0.554846465587616,-0.808714747428894,0.28332629799842834]]],-1],0,0,[],[],[]],[[[2,".bin",3061264465,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.9361398220062256,-1.5058434009552002,0.26838648319244385],"maxPosition",8,[1,-2.935258150100708,-1.5058085918426514,0.2684406340122223]]],-1],0,0,[],[],[]],[[[2,".bin",1274787136,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.009999999776482582,-0.009999999776482582,-0.00009999999747378752],"maxPosition",8,[1,0.009999999776482582,0.009999999776482582,0]]],-1],0,0,[],[],[]],[[[2,".bin",36586029,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.888200044631958,-1.4155943393707275,0.08789799362421036],"maxPosition",8,[1,-2.8879659175872803,-1.414125919342041,0.09092593193054199]]],-1],0,0,[],[],[]],[[[2,".bin",4239757764,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2400,"length":216,"count":54,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2400,"count":50,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5503341555595398,-1.136916160583496,0.26715579628944397],"maxPosition",8,[1,-0.016621941700577736,-0.8244541883468628,0.2990295886993408]]],-1],0,0,[],[],[]],[[[2,".bin",4194580940,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":576,"length":48,"count":12,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":576,"count":12,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.4933090209960938,-1.453574776649475,0.2644895315170288],"maxPosition",8,[1,-3.466174840927124,-1.4479396343231201,0.29042357206344604]]],-1],0,0,[],[],[]],[[[2,".bin",1306312071,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":75504,"length":12876,"count":3219,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":75504,"count":1573,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.493204116821289,-0.9058959484100342,0.015458110719919205],"maxPosition",8,[1,0.006796065717935562,-0.7641338109970093,0.31545811891555786]]],-1],0,0,[],[],[]],[[[2,".bin",3642205170,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2688,"length":336,"count":84,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":32880,"length":4800,"count":1200,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2688,"count":56,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":3024,"length":29856,"count":622,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.0645291805267334,-0.8407488465309143,0.6027331352233887],"maxPosition",8,[1,-3.043220281600952,-0.8236373662948608,0.6228304505348206]]],-1],0,0,[],[],[]],[[[2,".bin",2290506124,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":106320,"length":15684,"count":3921,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":106320,"count":2215,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.2046549320220947,-1.4620403051376343,0.23294886946678162],"maxPosition",8,[1,-1.057840347290039,-1.4026036262512207,0.5811110138893127]]],-1],0,0,[],[],[]],[[[2,".bin",3624906722,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":969360,"length":148656,"count":37164,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":969360,"count":20195,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.000633928575553,-0.0011428571306169033,-0.00019999999494757503],"maxPosition",8,[1,0.0354350209236145,0.0074761901050806046,0.00019999999494757503]]],-1],0,0,[],[],[]],[[[2,".bin",225189319,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.2933368384838104,-1.4583311080932617,0.2966321110725403],"maxPosition",8,[1,-0.2845192551612854,-1.4576774835586548,0.29717394709587097]]],-1],0,0,[],[],[]],[[[2,".bin",2217644074,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2786112,"length":421680,"count":105420,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2786112,"count":58044,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.0007335907430388033,-0.061650581657886505,-0.00019999999494757503],"maxPosition",8,[1,0.00957528967410326,0.0072876447811722755,0.00019999999494757503]]],-1],0,0,[],[],[]],[[[2,".bin",3243341666,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.22314991056919098,-0.8363540172576904,0.19244039058685303],"maxPosition",8,[1,-0.22282066941261292,-0.836327314376831,0.19258087873458862]]],-1],0,0,[],[],[]],[[[2,".bin",3793153037,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":106032,"length":15696,"count":3924,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":106032,"count":2209,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.057840347290039,-0.8489611148834229,0.2531372606754303],"maxPosition",8,[1,-0.561033308506012,-0.8243770599365234,0.5761058926582336]]],-1],0,0,[],[],[]],[[[2,".bin",162697947,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.175447940826416,-0.8632326722145081,0.03489965200424194],"maxPosition",8,[1,-2.1753063201904297,-0.8610000610351562,0.03889252990484238]]],-1],0,0,[],[],[]],[[[2,".bin",211991044,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1968,"length":252,"count":63,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":147276,"length":17256,"count":4314,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1968,"count":41,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":2220,"length":145056,"count":3022,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5306104421615601,-0.8644809722900391,0.4266080856323242],"maxPosition",8,[1,-0.4676104485988617,-0.8014809489250183,0.5421081185340881]]],-1],0,0,[],[],[]],[[[2,".bin",2400095596,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.018021592870354652,-0.8421998023986816,0.28914904594421387],"maxPosition",8,[1,-0.018008245155215263,-0.8418029546737671,0.29042357206344604]]],-1],0,0,[],[],[]],[[[2,".bin",2865048149,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.88944673538208,-1.3846169710159302,0.06885294616222382],"maxPosition",8,[1,-2.8894236087799072,-1.3844560384750366,0.0691528394818306]]],-1],0,0,[],[],[]],[[[2,".bin",4117714352,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.2933368384838104,-0.8161548376083374,0.2966321110725403],"maxPosition",8,[1,-0.2845192551612854,-0.8155010938644409,0.29717394709587097]]],-1],0,0,[],[],[]],[[[2,".bin",806877407,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.018021592870354652,-1.4320292472839355,0.28914904594421387],"maxPosition",8,[1,-0.018008245155215263,-1.4316325187683105,0.29042357206344604]]],-1],0,0,[],[],[]],[[[2,".bin",111747762,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.8586251139640808,-1.4012809991836548,0.059875182807445526],"maxPosition",8,[1,-0.8583592772483826,-1.3994413614273071,0.06330357491970062]]],-1],0,0,[],[],[]],[[[2,".bin",621865292,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":108384,"length":15696,"count":3924,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":108384,"count":2258,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.9252097606658936,-1.4620403051376343,0.2531372606754303],"maxPosition",8,[1,-2.179999351501465,-1.4374563694000244,0.6471590399742126]]],-1],0,0,[],[],[]],[[[2,".bin",1742138227,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.6414514780044556,-1.3890585899353027,0.06327790021896362],"maxPosition",8,[1,-0.6365686058998108,-1.3889923095703125,0.06400103121995926]]],-1],0,0,[],[],[]],[[[2,".bin",4161352423,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":576,"length":48,"count":12,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":576,"count":12,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.4933090209960938,-0.8258928060531616,0.2644895315170288],"maxPosition",8,[1,-3.466174840927124,-0.8202574253082275,0.29042357206344604]]],-1],0,0,[],[],[]],[[[2,".bin",230737209,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.321187138557434,-1.4068818092346191,0.03838125243782997],"maxPosition",8,[1,-1.321181297302246,-1.4065964221954346,0.0388919822871685]]],-1],0,0,[],[],[]],[[[2,".bin",210431093,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":240,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":240,"count":5,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.9142677783966064,-1.3959972858428955,0.05545811355113983],"maxPosition",8,[1,-2.914067029953003,-1.3759145736694336,0.05545811355113983]]],-1],0,0,[],[],[]],[[[2,".bin",882360898,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.175447940826416,-1.4128321409225464,0.03489965200424194],"maxPosition",8,[1,-2.1753063201904297,-1.410599708557129,0.03889252990484238]]],-1],0,0,[],[],[]],[[[2,".bin",3804314671,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5143734216690063,-1.3923916816711426,0.08694719523191452],"maxPosition",8,[1,-0.5104609727859497,-1.392202615737915,0.08791864663362503]]],-1],0,0,[],[],[]],[[[2,".bin",180372549,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.0178709030151367,-1.404569149017334,0.08317986130714417],"maxPosition",8,[1,-3.0161995887756348,-1.4044923782348633,0.08353391289710999]]],-1],0,0,[],[],[]],[[[2,".bin",2764115314,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5753507614135742,-1.4507713317871094,0.26702040433883667],"maxPosition",8,[1,-0.5502618551254272,-1.449378252029419,0.26856184005737305]]],-1],0,0,[],[],[]],[[[2,".bin",3587002445,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1968,"length":252,"count":63,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":147324,"length":17256,"count":4314,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1968,"count":41,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":2220,"length":145104,"count":3023,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.084810495376587,-0.8644809722900391,0.4888080954551697],"maxPosition",8,[1,-3.021810531616211,-0.8014809489250183,0.6043081283569336]]],-1],0,0,[],[],[]],[[[2,".bin",4236502236,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":26832,"length":5088,"count":1272,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":26832,"count":559,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.493204116821289,-1.136916160583496,0.015458110719919205],"maxPosition",8,[1,0.006796065717935562,-0.8036320209503174,0.3936467468738556]]],-1],0,0,[],[],[]],[[[2,".bin",1397639983,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.888200044631958,-0.8597063422203064,0.08789799362421036],"maxPosition",8,[1,-2.8879659175872803,-0.8582379221916199,0.09092593193054199]]],-1],0,0,[],[],[]],[[[2,".bin",1709749706,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":240,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":240,"count":5,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.8154758214950562,-0.8525421023368835,0.5861064791679382],"maxPosition",8,[1,-0.8135938048362732,-0.8525421023368835,0.7743126153945923]]],-1],0,0,[],[],[]],[[[2,".bin",3106559870,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.3446356058120728,-1.4074501991271973,0.03767603635787964],"maxPosition",8,[1,-1.3446217775344849,-1.4067703485488892,0.0388919822871685]]],-1],0,0,[],[],[]],[[[2,".bin",2070491986,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.8586251139640808,-0.8743910193443298,0.059875182807445526],"maxPosition",8,[1,-0.8583592772483826,-0.872551441192627,0.06330357491970062]]],-1],0,0,[],[],[]],[[[2,".bin",2280529716,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2688,"length":336,"count":84,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":33168,"length":4800,"count":1200,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2688,"count":56,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":3024,"length":30144,"count":628,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.0645291805267334,-1.4690489768981934,0.6027331352233887],"maxPosition",8,[1,-3.043220281600952,-1.4519374370574951,0.6228304505348206]]],-1],0,0,[],[],[]],[[[2,".bin",1537351453,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1392,"length":120,"count":30,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1392,"count":29,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.7808675169944763,-0.8133260607719421,0.27308201789855957],"maxPosition",8,[1,-0.3308265805244446,-0.7897124290466309,0.29516682028770447]]],-1],0,0,[],[],[]],[[[2,".bin",3351208198,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2688,"length":336,"count":84,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":32688,"length":4800,"count":1200,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2688,"count":56,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":3024,"length":29664,"count":618,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5103290677070618,-1.4690489768981934,0.5405331254005432],"maxPosition",8,[1,-0.48902034759521484,-1.4519374370574951,0.5606304407119751]]],-1],0,0,[],[],[]],[[[2,".bin",634344540,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1968,"length":252,"count":63,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":147372,"length":17256,"count":4314,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1968,"count":41,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":2220,"length":145152,"count":3024,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.084810495376587,-1.4927810430526733,0.4888080954551697],"maxPosition",8,[1,-3.021810531616211,-1.4297810792922974,0.6043081283569336]]],-1],0,0,[],[],[]],[[[2,".bin",236923096,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":240,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":240,"count":5,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.09825852513313293,-1.4444749355316162,0.30884870886802673],"maxPosition",8,[1,-0.09825459122657776,-1.4440813064575195,0.30884870886802673]]],-1],0,0,[],[],[]],[[[2,".bin",3876848565,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":240,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":240,"count":5,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.01810966432094574,-1.4344602823257446,0.29886746406555176],"maxPosition",8,[1,-0.017920175567269325,-1.4155116081237793,0.29886746406555176]]],-1],0,0,[],[],[]],[[[2,".bin",3222947462,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":240,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":240,"count":5,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.4932985305786133,-1.4607822895050049,0.31545811891555786],"maxPosition",8,[1,-3.4931092262268066,-1.4418336153030396,0.31545811891555786]]],-1],0,0,[],[],[]],[[[2,".bin",2916890125,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.88944673538208,-1.424960970878601,0.06885294616222382],"maxPosition",8,[1,-2.8894236087799072,-1.424800157546997,0.0691528394818306]]],-1],0,0,[],[],[]],[[[2,".bin",3271903614,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.8099323511123657,-1.4950568675994873,0.2531372606754303],"maxPosition",8,[1,-1.8099321126937866,-1.495023250579834,0.2531372606754303]]],-1],0,0,[],[],[]],[[[2,".bin",1776159810,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.22314991056919098,-1.4375050067901611,0.19244039058685303],"maxPosition",8,[1,-0.22282066941261292,-1.4374783039093018,0.19258087873458862]]],-1],0,0,[],[],[]],[[[2,".bin",1274787136,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.009999999776482582,-0.009999999776482582,-0.00009999999747378752],"maxPosition",8,[1,0.009999999776482582,0.009999999776482582,0]]],-1],0,0,[],[],[]],[[[42],[54,"chuan",[-2,-3,-4,-5,-6,-7,-8],[0,"cdLqyf/sNeEZEgJwW2vzbr",-1,0]],[23,"3DXY_group_001",1,[-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91],[0,"e5TbYGfMRZ464CByAfE068",1,0],[1,-10.848217010498047,-1.9629169702529907,-0.026603851467370987],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,6.949626445770264,6.949626445770264,6.949626445770264],[1,-90.00000965934633,0,0]],[5,"3DXY_geometry_001",2,[[4,-92,[1,"3c4yhMoDlacbK+mfWhggUY"],[0],[3],1]],[0,"5dCRghhXhRPrJQY7p/DjAR",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_002",2,[[4,-93,[1,"03iAFPnC1QfYXXUNrYpUyx"],[2],[3],3]],[0,"ddqGnHctlRvY+ZbDpZBEKU",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_003",2,[[4,-94,[1,"f1oUgq7XJQ25rq9nESR3t8"],[4],[3],5]],[0,"089tHnp5VVsq6wFDKTabNu",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_009",2,[[4,-95,[1,"fb/Y47FoZT2ZX7N4vUKODa"],[6],[3],7]],[0,"a6erpMnWdUw5GJb+zuc+pc",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_010",2,[[4,-96,[1,"aeQKCRTxZceLv87B7EY8s1"],[8],[3],9]],[0,"690Ark1wRdP5K1CzARaVfL",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_011",2,[[4,-97,[1,"36bChFGLxaHIhbQFMawws+"],[10],[3],11]],[0,"8e2bRENVRd34EhH3A19BPp",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_012",2,[[4,-98,[1,"6fVeYfY8RSL4C/nve7eXii"],[12],[3],13]],[0,"b4Jz2OsiNRwoXEqVKKQpkX",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_013",2,[[4,-99,[1,"42SK6Phkpd/Yt3QKFMq8ic"],[14],[3],15]],[0,"d8vnItd3Nb1L2lWb5pEAha",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_014",2,[[4,-100,[1,"cfM13EO1BVjYHklvFGg3FP"],[16],[3],17]],[0,"ac3CuFIVZfr7TVlSCMsKbC",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_015",2,[[4,-101,[1,"d5jaJd+1FZPIunfTX3J39q"],[18],[3],19]],[0,"36zDHjL79WVaQT+o2WyYhx",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_016",2,[[4,-102,[1,"daYtZP7r1YAqPhI9BFOZQ3"],[20],[3],21]],[0,"d6ZI7XAg5S5K5Skr0BzmfT",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_017",2,[[4,-103,[1,"12msuZ0BBRzZmQGHC5lMbS"],[22],[3],23]],[0,"35DQgjavtTy7WC3ImqK9F1",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_018",2,[[4,-104,[1,"ddQHFYI3lbUJY/wXjoFZxM"],[24],[3],25]],[0,"d1orLBLxleRKxXOjaH4Z9m",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_019",2,[[4,-105,[1,"cbasjpEsNevI2E2hDLBvZc"],[26],[3],27]],[0,"788e1ijK5YEpZF+TqMRNmT",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_020",2,[[4,-106,[1,"dfhWvrDxFfvrdSm/OJdzDf"],[28],[3],29]],[0,"775NoCHI9Ya4moLSFzPIFd",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_021",2,[[4,-107,[1,"dbdDWWvBdZKo76UoP/jvAn"],[30],[3],31]],[0,"ccVrxQb/hTnbVCPj7VWAWH",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_022",2,[[4,-108,[1,"4awBO8VK5eH42B1g+RGu2j"],[32],[3],33]],[0,"cfT0x3oEdTDapAqDC9nJ4c",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_023",2,[[4,-109,[1,"bbNvktzExcL7mFnhjuIW0+"],[34],[3],35]],[0,"136gY8RitWzJhPPrtDplbS",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_024",2,[[4,-110,[1,"e3jQIWlQdWf628oIT1YRlR"],[36],[3],37]],[0,"a5Nsp3gJ5QoaI1JXcElEC5",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_025",2,[[4,-111,[1,"93uMcZ20VSP4ITdBzRoXMF"],[38],[3],39]],[0,"2d9z5Cn1FaZrNXFh0fWoFQ",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_026",2,[[4,-112,[1,"9ejQcAewtZJrCavHU3U9MP"],[40],[3],41]],[0,"26fJkxYXNbHr351WJAtAOb",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_027",2,[[4,-113,[1,"40/uYHS7tW5oyJ9kUoBh0L"],[42],[3],43]],[0,"9bqiffDvlZ8LoCl1lPyZbI",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_028",2,[[4,-114,[1,"6bUBPRnzlXk5rZZYvIrn+l"],[44],[3],45]],[0,"47FFks37VWdrquDJ1ajO6A",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_029",2,[[4,-115,[1,"edT+vxnGZf0rKHHbOFA3ZN"],[46],[3],47]],[0,"1agptr5DRXF7YS2bdZ248u",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_030",2,[[4,-116,[1,"f3HBMduPFVg42HK/nlNiFe"],[48],[3],49]],[0,"bbtFxRATpVpokSSCCpaRJq",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_031",2,[[4,-117,[1,"382+vgpnBd5L0+LcCnqUQX"],[50],[3],51]],[0,"a2RbY2df9TkI2PvzF+Pn5q",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_032",2,[[4,-118,[1,"45V0uskBVfarGd9MWMFyqs"],[52],[3],53]],[0,"12FyzvAcZXPIdYEaNE6k4s",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_033",2,[[4,-119,[1,"efxufSYJdTC5WxIdtHQsdB"],[54],[3],55]],[0,"1c7q8UVwxZuZiouxqCMypU",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_034",2,[[4,-120,[1,"c5USaRhedRmKCYOGFfQPGY"],[56],[3],57]],[0,"04OoM2nCRXi4fUJXu1NIzT",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_035",2,[[4,-121,[1,"8dxs75VTxZapRHyHrSjCSo"],[58],[3],59]],[0,"11Do2cRPlfx46VRfLw+V/f",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_036",2,[[4,-122,[1,"dbusKUWupX+oNv0GpL1p42"],[60],[3],61]],[0,"6eIu93G/dZ060QgzOCKkm+",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_037",2,[[4,-123,[1,"dfUTB8Ewld97I5JM2uQ0to"],[62],[3],63]],[0,"f0iH+71XhdmobKrgoqKJvV",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_038",2,[[4,-124,[1,"dcglOpzYxVvqcJI8pnZi5g"],[64],[3],65]],[0,"3chXpxPnpdeJui4l0G1B27",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_039",2,[[4,-125,[1,"fab/VrRZVX64hw6AeL9m0j"],[66],[3],67]],[0,"daqg54lZhcYLzajwuwqcgl",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_040",2,[[4,-126,[1,"a9Mid+CKVbUJcz9LrhGUW8"],[68],[3],69]],[0,"8etNSO0TBU/o4GBBR//g+0",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_041",2,[[4,-127,[1,"4bUrzh5YxT2ZYLr8cWo5Yw"],[70],[3],71]],[0,"64aKIbV/lXNYd2qLYKTaGc",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_043",2,[[4,-128,[1,"8bt5cjRU1Zg6RAtdMKYClO"],[72],[3],73]],[0,"7agaVAH9hZWpjlEmB4CK97",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_044",2,[[4,-129,[1,"b9D1SdMvZZoZwBelG4Gtfe"],[74],[3],75]],[0,"c9PI7MX6Rb7LBUYYFk1M1L",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_045",2,[[4,-130,[1,"97Euqk2AtQWL/Fj4LXebCR"],[76],[3],77]],[0,"42PIayf1lSJYSYlO7AXB2i",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_046",2,[[4,-131,[1,"4ccfNecqtZkJkjiKB7mPcD"],[78],[3],79]],[0,"b6TwnGd4xY0aO8HnSGzJdE",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_047",2,[[4,-132,[1,"5bMWByt9FfdpaJNnb2ff96"],[80],[3],81]],[0,"59oANGBqVc0q3KYx4xWspr",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_048",2,[[4,-133,[1,"22x1f4JqtdQ4lRwHS2iNBl"],[82],[3],83]],[0,"7d4ZS0ByZRJ7tB2by9SS1a",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_049",2,[[4,-134,[1,"aaXmzl4GFejLTEThlJZXFt"],[84],[3],85]],[0,"b5D5rP7dBawZ0gEZA/lh8z",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_050",2,[[4,-135,[1,"51ici77BRe2ITkaqsm2qlC"],[86],[3],87]],[0,"0dJqhQpYxfHpa/3cUvu/ML",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_051",2,[[4,-136,[1,"75BpKGAwpRnZZKYvPVCVXK"],[88],[3],89]],[0,"6bikswqR9Y2LutgGi0VBOS",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_052",2,[[4,-137,[1,"cfzOT+zXdfYpL+a/Id7NHG"],[90],[3],91]],[0,"331ZqZeZdSsKRnDRkyte1b",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_053",2,[[4,-138,[1,"6f11AIHI5XZL0Eibdsr5YB"],[92],[3],93]],[0,"6diDko+4lbybLQ3YyO3n5J",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_054",2,[[4,-139,[1,"0bgRSAaxxdcaYyARDhfmJR"],[94],[3],95]],[0,"3a2iXq7UdWCIrgDCa/bEXv",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_055",2,[[4,-140,[1,"91EJKy3zNTooBAZVPMxjaQ"],[96],[3],97]],[0,"d6fZOweH5QkIsFlJbo3h+a",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_056",2,[[4,-141,[1,"237cnrz0BZJJHkfft65ioV"],[98],[3],99]],[0,"85vLr3f4xR37OWwNPsb+r/",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_057",2,[[4,-142,[1,"2eBoeWDA5f6qRYOTAik8Zx"],[100],[3],101]],[0,"60cRf9V0FV9bJtNpC51nl1",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_058",2,[[4,-143,[1,"54zTqexsJWzIl3+rLfx5ux"],[102],[3],103]],[0,"36xZLjAQ1e9q38YWN+D5pp",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_059",2,[[4,-144,[1,"5eH79rMS1TT7BpiTWIbDfq"],[104],[3],105]],[0,"0aw3QwQLxTb42KBv8gdTUu",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_060",2,[[4,-145,[1,"0epsIsxTFUX42YtuBIBDvQ"],[106],[3],107]],[0,"41O2OJ3wxaxKmEOj9hXW8C",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_061",2,[[4,-146,[1,"52Yb2qy0Zabo73i8AHqJ6I"],[108],[3],109]],[0,"99mf3LomZerLs9ktiVYWqm",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_062",2,[[4,-147,[1,"ddV89I7+ZS5pQLy0B2G0Xi"],[110],[3],111]],[0,"eeivPCUJ9S7IUROgx5Fgz+",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_063",2,[[4,-148,[1,"c9PcCiphVWXZF8fosOFXyT"],[112],[3],113]],[0,"58fb9nNlVX+KipEnn/FZQJ",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_064",2,[[4,-149,[1,"eaVuppz+xegqMvb9atZarF"],[114],[3],115]],[0,"f72LJ6RzhQaJRv/03cLoor",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_065",2,[[4,-150,[1,"95GDTk1OFTHL+vN1YafXQ7"],[116],[3],117]],[0,"5f6jujCUhSEalBmAqEjKcc",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_066",2,[[4,-151,[1,"53ndurVbFUU7atv4N89P2P"],[118],[3],119]],[0,"01Un9IS0Nf2JNjhR1T0P7L",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_067",2,[[4,-152,[1,"3efKHrWq9YSbG6/5YyGPix"],[120],[3],121]],[0,"dcDGZNUZ9Rkq8h7uIanFzo",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_068",2,[[4,-153,[1,"d3IWFkWcJdM6WEZrtE9lbC"],[122],[3],123]],[0,"0dPUXvmRNbL4aSty91XoPV",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_069",2,[[4,-154,[1,"74lFmDJxFen4ZevWXFT1Yc"],[124],[3],125]],[0,"d1znXHldZUPpWGNOS+a43t",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_070",2,[[4,-155,[1,"43suWd6JZSSYwUvK8iMTjU"],[126],[3],127]],[0,"3aoht8wP1YV7bb0DW2kv1w",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_071",2,[[4,-156,[1,"9f6AkHHJxeLKjWbM9hwDjx"],[128],[3],129]],[0,"6fwkYXLXFW8Z0v8bq5LoNd",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_072",2,[[4,-157,[1,"949oVFgWdWsYzXOXeGj2bn"],[130],[3],131]],[0,"a3mv7mSrxdnKCdMoIYqD5y",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_073",2,[[4,-158,[1,"fbK9JJVilfR575wFI/Tug3"],[132],[3],133]],[0,"4cqlEX6ddcx7VJIbO6K6ms",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_074",2,[[4,-159,[1,"d41KatxFZVq4ngWfFo3MrV"],[134],[3],135]],[0,"eaW3OFs4RYOaHpZbZ1cqe5",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_075",2,[[4,-160,[1,"22j1dOpZ5VZoyB0oAouVI7"],[136],[3],137]],[0,"b2iDV+BSFavpYBMe0Vv1j2",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_076",2,[[4,-161,[1,"39S9r4iaFZ/Z9qyQx1HLsd"],[138,139],[3],140]],[0,"43BCR2xhxSCqQ5So7YXR8f",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_077",2,[[4,-162,[1,"a4IR7UopRTTblj+cms0yun"],[141],[3],142]],[0,"26ZJ4NFoFQQrcM47aBR0l6",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_078",2,[[4,-163,[1,"ddYQUCDqxZp5RzXwPYVFss"],[143,144],[3],145]],[0,"e9Ou7d3GZeUYXLwSlK+DCa",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_079",2,[[4,-164,[1,"9fOLsmaD9WGr03AzEmRhmJ"],[146],[3],147]],[0,"89luV4LapXCI6n4HUPH0Mx",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_080",2,[[4,-165,[1,"17LvzpaRRdCrZjZxU0N/Zh"],[148,149],[3],150]],[0,"74mQmVcQNcXJugXQkGqWLV",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_081",2,[[4,-166,[1,"d030VvRsBZYo4QH053esSi"],[151],[3],152]],[0,"4chySS859YrqrSQKxb7zTq",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_086",2,[[4,-167,[1,"d89ae8W6VVP6mEX08nbxKB"],[153,154],[3],155]],[0,"088eqC8lRQubku56duffFv",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_087",2,[[4,-168,[1,"4cQMVWvRFUwYsGIOahbz1v"],[156,157],[3],158]],[0,"39iNuq4SlcQpopGidVrm9O",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_088",2,[[4,-169,[1,"5dk6ELSSRWNaRXafoEA1By"],[159,160],[3],161]],[0,"80BN5cXcVVhpteElvQYh4l",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_089",2,[[4,-170,[1,"c8bNA86iBVY5ERLa82BcAv"],[162,163],[3],164]],[0,"e2zQBOApNVnqgLbLJdxBrm",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_090",2,[[4,-171,[1,"e5cBTJDZ5fa5dgh7jUmzAm"],[165,166],[3],167]],[0,"4cG1lLVyxRWKP4fAe6XaTR",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_091",2,[[4,-172,[1,"5dSTTV2zlTi5pT7RrXkl3Q"],[168,169],[3],170]],[0,"dd44HXvP1YiZcFspMZTyDd",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_092",2,[[4,-173,[1,"b3fh53d0paQotaLINg9+K1"],[171,172],[3],173]],[0,"bbN3ihXvJc8ZKI/BjRVgxv",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[5,"3DXY_geometry_093",2,[[4,-174,[1,"10nNuSmgVZJKS0GTmMyBPG"],[174,175],[3],176]],[0,"81EzogxZ5YWqeCy14JbFXp",1,0],[1,1.7432568073272705,1.1369160413742065,-0.015458056703209877]],[10,"henpi_zi",1,[[4,-175,[1,"b0XS7cnSJd/Y5q3t77zRz4"],[177],[3],178]],[0,"a4Pj/haW9SjJ1cVhG7yQlf",1,0],[1,-2.802366018295288,1.6666456460952759,0.5203166007995605],[3,1.5454309444991482e-8,0.7071067513842251,-1.5454309444991482e-8,0.7071068109888683],[1,27.144224166870117,27.144224166870117,27.144224166870117],[1,0.000002504478050688004,89.99999517032704,-1.0555585433541858e-13]],[10,"zuolian_zi",1,[[4,-176,[1,"62ZY+gebVd2p+KPKGQLUuz"],[179],[3],180]],[0,"c0jBaVc0JWB63xKWFVNVb3",1,0],[1,-2.802366018295288,1.5620834827423096,1.5220904350280762],[3,1.5454309444991482e-8,0.7071067513842251,-1.5454309444991482e-8,0.7071068109888683],[1,27.144224166870117,27.144224166870117,27.144224166870117],[1,0.000002504478050688004,89.99999517032704,-1.0555585433541858e-13]],[10,"youlian_zi",1,[[4,-177,[1,"8dpmBbFLdY6rUdpEvUi/P3"],[181],[3],182]],[0,"4fyZ9SXmddc7AcgWdTf9ZK",1,0],[1,-2.802366018295288,1.5686461925506592,-1.1335549354553223],[3,1.5454309444991482e-8,0.7071067513842251,-1.5454309444991482e-8,0.7071068109888683],[1,27.144224166870117,27.144224166870117,27.144224166870117],[1,0.000002504478050688004,89.99999517032704,-1.0555585433541858e-13]],[10,"henpi_di",1,[[4,-178,[1,"96lry+tUdZIaUjC+OeK2gT"],[183],[3],184]],[0,"71XfmzhzpRm5riCw6q/Noz",1,0],[1,-2.806309461593628,1.740225076675415,0.004190921783447266],[3,0.5000000521540606,-0.5000000521540606,0.4999999627470948,-0.49999993294477285],[1,15.372176170349121,72.79518127441406,72.79518127441406],[1,0,-269.99998633962167,-90]],[10,"youlian_di",1,[[4,-179,[1,"e23d0nh2dXjLrMHbeXRsr4"],[185],[3],186]],[0,"e4XUCUeMRfE4t9C0OLXG60",1,0],[1,-2.806309461593628,0.853573739528656,-1.2856345176696777],[3,0.5000000521540606,-0.5000000521540606,0.4999999627470948,-0.49999993294477285],[1,98.91201782226562,17.467937469482422,72.79518127441406],[1,0,-269.99998633962167,-90]],[10,"zuolian_di",1,[[4,-180,[1,"86J+9iVmlXWrK2ZqdnyrZn"],[187],[3],188]],[0,"e08Rn1DTJRSoUrR84fGrg5",1,0],[1,-2.806309461593628,0.853573739528656,1.3723738193511963],[3,0.5000000521540606,-0.5000000521540606,0.4999999627470948,-0.49999993294477285],[1,98.91201782226562,17.467937469482422,72.79518127441406],[1,0,-269.99998633962167,-90]]],0,[0,6,1,0,-1,2,0,-2,86,0,-3,87,0,-4,88,0,-5,89,0,-6,90,0,-7,91,0,-1,3,0,-2,4,0,-3,5,0,-4,6,0,-5,7,0,-6,8,0,-7,9,0,-8,10,0,-9,11,0,-10,12,0,-11,13,0,-12,14,0,-13,15,0,-14,16,0,-15,17,0,-16,18,0,-17,19,0,-18,20,0,-19,21,0,-20,22,0,-21,23,0,-22,24,0,-23,25,0,-24,26,0,-25,27,0,-26,28,0,-27,29,0,-28,30,0,-29,31,0,-30,32,0,-31,33,0,-32,34,0,-33,35,0,-34,36,0,-35,37,0,-36,38,0,-37,39,0,-38,40,0,-39,41,0,-40,42,0,-41,43,0,-42,44,0,-43,45,0,-44,46,0,-45,47,0,-46,48,0,-47,49,0,-48,50,0,-49,51,0,-50,52,0,-51,53,0,-52,54,0,-53,55,0,-54,56,0,-55,57,0,-56,58,0,-57,59,0,-58,60,0,-59,61,0,-60,62,0,-61,63,0,-62,64,0,-63,65,0,-64,66,0,-65,67,0,-66,68,0,-67,69,0,-68,70,0,-69,71,0,-70,72,0,-71,73,0,-72,74,0,-73,75,0,-74,76,0,-75,77,0,-76,78,0,-77,79,0,-78,80,0,-79,81,0,-80,82,0,-81,83,0,-82,84,0,-83,85,0,0,3,0,0,4,0,0,5,0,0,6,0,0,7,0,0,8,0,0,9,0,0,10,0,0,11,0,0,12,0,0,13,0,0,14,0,0,15,0,0,16,0,0,17,0,0,18,0,0,19,0,0,20,0,0,21,0,0,22,0,0,23,0,0,24,0,0,25,0,0,26,0,0,27,0,0,28,0,0,29,0,0,30,0,0,31,0,0,32,0,0,33,0,0,34,0,0,35,0,0,36,0,0,37,0,0,38,0,0,39,0,0,40,0,0,41,0,0,42,0,0,43,0,0,44,0,0,45,0,0,46,0,0,47,0,0,48,0,0,49,0,0,50,0,0,51,0,0,52,0,0,53,0,0,54,0,0,55,0,0,56,0,0,57,0,0,58,0,0,59,0,0,60,0,0,61,0,0,62,0,0,63,0,0,64,0,0,65,0,0,66,0,0,67,0,0,68,0,0,69,0,0,70,0,0,71,0,0,72,0,0,73,0,0,74,0,0,75,0,0,76,0,0,77,0,0,78,0,0,79,0,0,80,0,0,81,0,0,82,0,0,83,0,0,84,0,0,85,0,0,86,0,0,87,0,0,88,0,0,89,0,0,90,0,0,91,0,10,1,180],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-2,1,-1,1,-1,-2,1,-1,1,-1,-2,1,-1,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1],[2,46,2,47,2,48,2,49,2,50,5,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,5,63,0,64,0,65,0,66,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,5,81,0,82,0,83,0,84,0,85,0,86,0,87,0,88,0,89,0,90,0,91,0,92,0,93,0,94,0,95,0,96,0,97,0,98,0,99,5,100,0,101,0,102,0,103,0,104,0,105,0,106,0,107,0,108,0,109,0,110,2,111,3,112,0,113,0,114,2,3,115,0,116,2,3,117,0,118,2,3,119,0,120,3,4,121,4,6,122,3,4,123,4,6,124,3,4,125,4,6,126,3,4,127,4,6,128,7,129,7,130,7,131,8,132,8,133,8,134]],[[[2,".bin",822755161,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.9361398220062256,-0.7680237293243408,0.26838648319244385],"maxPosition",8,[1,-2.935258150100708,-0.7679890990257263,0.2684406340122223]]],-1],0,0,[],[],[]],[[[2,".bin",2825861205,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.442624092102051,-1.4499772787094116,0.2646203339099884],"maxPosition",8,[1,-3.441668748855591,-1.4498411417007446,0.2652896046638489]]],-1],0,0,[],[],[]],[[[2,".bin",3108253637,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2688,"length":336,"count":84,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":32688,"length":4800,"count":1200,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2688,"count":56,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":3024,"length":29664,"count":618,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5103290677070618,-0.8407488465309143,0.5405331254005432],"maxPosition",8,[1,-0.48902034759521484,-0.8236373662948608,0.5606304407119751]]],-1],0,0,[],[],[]],[[[2,".bin",1031187415,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.11012353003025055,-1.4459785223007202,0.24188442528247833],"maxPosition",8,[1,-0.1078498438000679,-1.4457768201828003,0.24303072690963745]]],-1],0,0,[],[],[]],[[[2,".bin",2240352648,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1632,"length":228,"count":57,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":41364,"length":6228,"count":1557,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1632,"count":34,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":1860,"length":39504,"count":823,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.084901809692383,-1.498727560043335,0.6354483962059021],"maxPosition",8,[1,-2.0356011390686035,-0.7715699076652527,0.8889711499214172]]],-1],0,0,[],[],[]],[[[2,".bin",2515511987,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":106656,"length":15684,"count":3921,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":106656,"count":2222,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.2046549320220947,-0.8838137984275818,0.23174495995044708],"maxPosition",8,[1,-1.057840347290039,-0.8243770599365234,0.5799071192741394]]],-1],0,0,[],[],[]],[[[2,".bin",4171894485,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.3446356058120728,-0.867061972618103,0.03767603635787964],"maxPosition",8,[1,-1.3446217775344849,-0.8663820624351501,0.0388919822871685]]],-1],0,0,[],[],[]],[[[2,".bin",1613306503,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1968,"length":252,"count":63,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":147516,"length":17256,"count":4314,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1968,"count":41,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":2220,"length":145296,"count":3027,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5306104421615601,-1.4927810430526733,0.4266080856323242],"maxPosition",8,[1,-0.4676104485988617,-1.4297810792922974,0.5421081185340881]]],-1],0,0,[],[],[]],[[[2,".bin",2083249650,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":19920,"length":3936,"count":984,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":19920,"count":415,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.493204116821289,-1.4702001810073853,0.015458110719919205],"maxPosition",8,[1,0.006796065717935562,-1.136916160583496,0.31545811891555786]]],-1],0,0,[],[],[]],[[[2,".bin",31910981,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.33449605107307434,-0.8715964555740356,0.1361168920993805],"maxPosition",8,[1,-0.33017632365226746,-0.8712331652641296,0.1376420557498932]]],-1],0,0,[],[],[]],[[[2,".bin",3514264199,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.88944673538208,-0.8490322232246399,0.06885294616222382],"maxPosition",8,[1,-2.8894236087799072,-0.8488712906837463,0.0691528394818306]]],-1],0,0,[],[],[]],[[[2,".bin",1254922676,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.4603238105773926,-0.8107136487960815,0.29583606123924255],"maxPosition",8,[1,-3.2018051147460938,-0.7965857982635498,0.31467801332473755]]],-1],0,0,[],[],[]],[[[2,".bin",1198651219,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1680,"length":228,"count":57,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":41412,"length":6228,"count":1557,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1680,"count":35,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":1908,"length":39504,"count":823,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.1643016338348389,-1.498727560043335,0.56650710105896],"maxPosition",8,[1,-0.46476802229881287,-0.7715699076652527,0.7743126153945923]]],-1],0,0,[],[],[]],[[[2,".bin",1364906200,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":240,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":240,"count":5,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.8099323511123657,-0.7728829979896545,0.2531372606754303],"maxPosition",8,[1,-1.8099321126937866,-0.772849440574646,0.2531372606754303]]],-1],0,0,[],[],[]],[[[2,".bin",1159825041,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.4603238105773926,-1.4772465229034424,0.29583606123924255],"maxPosition",8,[1,-3.2018051147460938,-1.4631187915802002,0.31467801332473755]]],-1],0,0,[],[],[]],[[[2,".bin",2229179591,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1580160,"length":242592,"count":60648,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1580160,"count":32920,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.00017857144121080637,-0.06053571403026581,-0.00019999999494757503],"maxPosition",8,[1,0.0089285708963871,0.0074761901050806046,0.00019999999494757503]]],-1],0,0,[],[],[]],[[[2,".bin",400200758,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.33449605107307434,-1.4025992155075073,0.1361168920993805],"maxPosition",8,[1,-0.33017632365226746,-1.4022358655929565,0.1376420557498932]]],-1],0,0,[],[],[]],[[[2,".bin",3892916636,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":240,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":240,"count":5,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.01810966432094574,-0.8583205938339233,0.29886746406555176],"maxPosition",8,[1,-0.017920175567269325,-0.839371919631958,0.29886746406555176]]],-1],0,0,[],[],[]],[[[2,".bin",3341328394,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.442624092102051,-0.8239912986755371,0.2646203339099884],"maxPosition",8,[1,-3.441668748855591,-0.8238551616668701,0.2652896046638489]]],-1],0,0,[],[],[]],[[[2,".bin",1911328065,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":240,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":240,"count":5,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.2299771308898926,-1.1333630084991455,0.535743772983551],"maxPosition",8,[1,-1.2287780046463013,-1.1333630084991455,0.6556657552719116]]],-1],0,0,[],[],[]],[[[2,".bin",2245224497,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":240,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":240,"count":5,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.4932985305786133,-0.8319986462593079,0.31545811891555786],"maxPosition",8,[1,-3.4931092262268066,-0.8130500316619873,0.31545811891555786]]],-1],0,0,[],[],[]],[[[2,".bin",2314478138,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":240,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":240,"count":5,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.561399459838867,-0.8525421023368835,0.6593596935272217],"maxPosition",8,[1,-2.55910325050354,-0.8525421023368835,0.8889711499214172]]],-1],0,0,[],[],[]],[[[2,".bin",2575196579,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9628399610519409,-1.3936275243759155,0.03872647136449814],"maxPosition",8,[1,-0.9297224283218384,-1.3932456970214844,0.040850862860679626]]],-1],0,0,[],[],[]],[[[2,".bin",4086491348,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.11012353003025055,-0.8280555605888367,0.24188442528247833],"maxPosition",8,[1,-0.1078498438000679,-0.827853798866272,0.24303072690963745]]],-1],0,0,[],[],[]],[[[2,".bin",1288692004,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.0178709030151367,-0.8693400025367737,0.08317986130714417],"maxPosition",8,[1,-3.0161995887756348,-0.869263231754303,0.08353391289710999]]],-1],0,0,[],[],[]],[[[2,".bin",1735766723,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4752,"length":408,"count":102,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4752,"count":99,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.7808834910392761,-1.4651176929473877,0.25807514786720276],"maxPosition",8,[1,-0.016621941700577736,-1.136916160583496,0.2990295886993408]]],-1],0,0,[],[],[]],[[[2,".bin",3143211372,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.321187138557434,-0.8672360181808472,0.03838125243782997],"maxPosition",8,[1,-1.321181297302246,-0.8669503927230835,0.0388919822871685]]],-1],0,0,[],[],[]],[[[2,".bin",2842983122,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.6414514780044556,-0.8848399519920349,0.06327790021896362],"maxPosition",8,[1,-0.6365686058998108,-0.8847737908363342,0.06400103121995926]]],-1],0,0,[],[],[]],[[[2,".bin",3759577457,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":74832,"length":12756,"count":3189,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":74832,"count":1559,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.493204116821289,-1.5096983909606934,0.015458110719919205],"maxPosition",8,[1,0.006796065717935562,-1.367936372756958,0.31545811891555786]]],-1],0,0,[],[],[]],[[[2,".bin",265076217,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":105456,"length":15696,"count":3924,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":105456,"count":2197,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.9252097606658936,-0.8489611148834229,0.2531372606754303],"maxPosition",8,[1,-2.179999351501465,-0.8243770599365234,0.6471590399742126]]],-1],0,0,[],[],[]],[[[2,".bin",4222767122,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9628399610519409,-0.880586564540863,0.03872647136449814],"maxPosition",8,[1,-0.9297224283218384,-0.8802047967910767,0.040850862860679626]]],-1],0,0,[],[],[]],[[[2,".bin",1086768369,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.88944673538208,-0.8893762230873108,0.06885294616222382],"maxPosition",8,[1,-2.8894236087799072,-0.8892152905464172,0.0691528394818306]]],-1],0,0,[],[],[]],[[{"name":"bg_01","rect":{"x":0,"y":0,"width":13300,"height":1280},"offset":{"x":0,"y":0},"originalSize":{"width":13300,"height":1280},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[4],[135]],[[[13,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_ALBEDO_MAP":true},{},{}],[[[{"occlusion":0.582,"roughness":0.445,"metallic":0.263,"SpecularIntensity":0.439},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[7,3],[136,1]],[[[13,[{"rasterizerState":{"isDepthClip":false},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{},{},{}],[[[{"roughness":0.8069013357162476,"metallic":0.4000000059604645},"mainColor",8,[4,4282203647],"albedoScale",8,[1,0.6196078658103943,0.2039215862751007,0.22745099663734436]],{},{}],11,0,0]]],0,0,[0],[3],[1]],[[{"name":"p1","rect":{"x":0,"y":0,"width":193,"height":738},"offset":{"x":0,"y":0},"originalSize":{"width":193,"height":738},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[4],[137]]]]
